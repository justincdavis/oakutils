from typing import Any, ClassVar, Dict

from typing import overload
CONTAINS_LINES: FileGeometry
CONTAINS_POINTS: FileGeometry
CONTAINS_TRIANGLES: FileGeometry
CONTENTS_UNKNOWN: FileGeometry

class AzureKinectMKVMetadata:
    height: int
    stream_length_usec: int
    width: int
    def __init__(self) -> None: ...

class AzureKinectMKVReader:
    def __init__(self) -> None: ...
    def close(self) -> Any: ...
    def get_metadata(self) -> Any: ...
    def is_eof(self) -> Any: ...
    def is_opened(self) -> bool: ...
    def next_frame(self) -> Any: ...
    def open(self, filename) -> Any: ...
    def seek_timestamp(self, timestamp) -> Any: ...

class AzureKinectRecorder:
    def __init__(self, sensor_config: AzureKinectSensorConfig, sensor_index: int) -> None: ...
    def close_record(self) -> Any: ...
    def init_sensor(self) -> Any: ...
    def is_record_created(self) -> Any: ...
    def open_record(self, filename) -> Any: ...
    def record_frame(self, enable_record, enable_align_depth_to_color) -> Any: ...

class AzureKinectSensor:
    def __init__(self, sensor_config: AzureKinectSensorConfig) -> None: ...
    def capture_frame(self, enable_align_depth_to_color) -> Any: ...
    def connect(self, sensor_index) -> Any: ...
    def disconnect(self) -> None: ...
    def list_devices(self, *args, **kwargs) -> Any: ...

class AzureKinectSensorConfig:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, config: Dict[str,str]) -> None: ...

class FileGeometry:
    __doc__: ClassVar[str] = ...  # read-only
    __members__: ClassVar[dict] = ...  # read-only
    CONTAINS_LINES: ClassVar[FileGeometry] = ...
    CONTAINS_POINTS: ClassVar[FileGeometry] = ...
    CONTAINS_TRIANGLES: ClassVar[FileGeometry] = ...
    CONTENTS_UNKNOWN: ClassVar[FileGeometry] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

def read_azure_kinect_mkv_metadata(filename) -> Any: ...
def read_azure_kinect_sensor_config(filename) -> Any: ...
def read_feature(filename) -> Any: ...
def read_file_geometry_type(arg0: str) -> FileGeometry: ...
def read_image(filename) -> Any: ...
def read_line_set(filename, format = ..., print_progress = ...) -> Any: ...
def read_octree(filename, format = ...) -> Any: ...
def read_pinhole_camera_intrinsic(filename) -> Any: ...
def read_pinhole_camera_parameters(filename) -> Any: ...
def read_pinhole_camera_trajectory(filename) -> Any: ...
def read_point_cloud(filename, format = ..., remove_nan_points = ..., remove_infinite_points = ..., print_progress = ...) -> Any: ...
def read_pose_graph(filename) -> Any: ...
def read_triangle_mesh(filename, enable_post_processing = ..., print_progress = ...) -> Any: ...
def read_triangle_model(filename, print_progress = ...) -> Any: ...
def read_voxel_grid(filename, format = ..., print_progress = ...) -> Any: ...
def write_azure_kinect_mkv_metadata(filename, config) -> Any: ...
def write_azure_kinect_sensor_config(filename, config) -> Any: ...
def write_feature(filename, feature) -> Any: ...
def write_image(filename, image, quality = ...) -> Any: ...
def write_line_set(filename, line_set, write_ascii = ..., compressed = ..., print_progress = ...) -> Any: ...
def write_octree(filename, octree) -> Any: ...
def write_pinhole_camera_intrinsic(filename, intrinsic) -> Any: ...
def write_pinhole_camera_parameters(filename, parameters) -> Any: ...
def write_pinhole_camera_trajectory(filename, trajectory) -> Any: ...
def write_point_cloud(filename, pointcloud, write_ascii = ..., compressed = ..., print_progress = ...) -> Any: ...
def write_pose_graph(filename, pose_graph) -> Any: ...
def write_triangle_mesh(filename, mesh, write_ascii = ..., compressed = ..., write_vertex_normals = ..., write_vertex_colors = ..., write_triangle_uvs = ..., print_progress = ...) -> Any: ...
def write_voxel_grid(filename, voxel_grid, write_ascii = ..., compressed = ..., print_progress = ...) -> Any: ...
