"""
This type stub file was generated by pyright.
"""

import typing
import datetime
import numpy
from depthai import node as node
from pathlib import Path
from typing import Any, Callable, ClassVar, Dict, Iterator, List, Optional, Set, Tuple, overload

json = dict
X_LINK_ALREADY_OPEN: XLinkError_t
X_LINK_ANY_PLATFORM: XLinkPlatform
X_LINK_ANY_PROTOCOL: XLinkProtocol
X_LINK_ANY_STATE: XLinkDeviceState
X_LINK_BOOTED: XLinkDeviceState
X_LINK_BOOTLOADER: XLinkDeviceState
X_LINK_COMMUNICATION_FAIL: XLinkError_t
X_LINK_COMMUNICATION_NOT_OPEN: XLinkError_t
X_LINK_COMMUNICATION_UNKNOWN_ERROR: XLinkError_t
X_LINK_DEVICE_ALREADY_IN_USE: XLinkError_t
X_LINK_DEVICE_NOT_FOUND: XLinkError_t
X_LINK_ERROR: XLinkError_t
X_LINK_FLASH_BOOTED: XLinkDeviceState
X_LINK_INIT_PCIE_ERROR: XLinkError_t
X_LINK_INIT_TCP_IP_ERROR: XLinkError_t
X_LINK_INIT_USB_ERROR: XLinkError_t
X_LINK_INSUFFICIENT_PERMISSIONS: XLinkError_t
X_LINK_IPC: XLinkProtocol
X_LINK_MYRIAD_2: XLinkPlatform
X_LINK_MYRIAD_X: XLinkPlatform
X_LINK_NMB_OF_PROTOCOLS: XLinkProtocol
X_LINK_NOT_IMPLEMENTED: XLinkError_t
X_LINK_OUT_OF_MEMORY: XLinkError_t
X_LINK_PCIE: XLinkProtocol
X_LINK_SUCCESS: XLinkError_t
X_LINK_TCP_IP: XLinkProtocol
X_LINK_TIMEOUT: XLinkError_t
X_LINK_UNBOOTED: XLinkDeviceState
X_LINK_USB_CDC: XLinkProtocol
X_LINK_USB_VSC: XLinkProtocol
class ADatatype:
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getRaw(self) -> RawBuffer:
        ...
    


class AprilTag:
    bottomLeft: Point2f
    bottomRight: Point2f
    decisionMargin: float
    hamming: int
    id: int
    topLeft: Point2f
    topRight: Point2f
    def __init__(self) -> None:
        ...
    


class AprilTagConfig(Buffer):
    class Family:
        __members__: ClassVar[dict] = ...
        TAG_16H5: ClassVar[RawAprilTagConfig.Family] = ...
        TAG_25H9: ClassVar[RawAprilTagConfig.Family] = ...
        TAG_36H10: ClassVar[RawAprilTagConfig.Family] = ...
        TAG_36H11: ClassVar[RawAprilTagConfig.Family] = ...
        TAG_CIR21H7: ClassVar[RawAprilTagConfig.Family] = ...
        TAG_STAND41H12: ClassVar[RawAprilTagConfig.Family] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class QuadThresholds:
        criticalDegree: float
        deglitch: bool
        maxLineFitMse: float
        maxNmaxima: int
        minClusterPixels: int
        minWhiteBlackDiff: int
        def __init__(self) -> None:
            ...
        
    
    
    def __init__(self) -> None:
        ...
    
    def get(self) -> RawAprilTagConfig:
        ...
    
    def set(self, arg0: RawAprilTagConfig) -> AprilTagConfig:
        ...
    
    def setFamily(self, family: RawAprilTagConfig.Family) -> AprilTagConfig:
        ...
    


class AprilTagProperties:
    initialConfig: RawAprilTagConfig
    inputConfigSync: bool
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AprilTags(Buffer):
    aprilTags: List[AprilTag]
    def __init__(self) -> None:
        ...
    
    def getSequenceNum(self) -> int:
        ...
    
    def getTimestamp(self) -> datetime.timedelta:
        ...
    
    def getTimestampDevice(self) -> datetime.timedelta:
        ...
    
    def setSequenceNum(self, arg0: int) -> AprilTags:
        ...
    
    def setTimestamp(self, arg0: datetime.timedelta) -> AprilTags:
        ...
    
    def setTimestampDevice(self, arg0: datetime.timedelta) -> AprilTags:
        ...
    


class Asset:
    alignment: int
    data: numpy.ndarray[numpy.uint8]
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, arg0: str) -> None:
        ...
    
    @property
    def key(self) -> str:
        ...
    


class AssetManager:
    def __init__(self) -> None:
        ...
    
    def addExisting(self, assets: List[Asset]) -> None:
        ...
    
    @overload
    def get(self, key: str) -> Asset:
        ...
    
    @overload
    def get(self, key: str) -> Asset:
        ...
    
    @overload
    def getAll(self) -> List[Asset]:
        ...
    
    @overload
    def getAll(self) -> List[Asset]:
        ...
    
    def remove(self, key: str) -> None:
        ...
    
    @overload
    def set(self, asset: Asset) -> Asset:
        ...
    
    @overload
    def set(self, key: str, asset: Asset) -> Asset:
        ...
    
    @overload
    def set(self, key: str, path: Path, alignment: int = ...) -> Asset:
        ...
    
    @overload
    def set(self, key: str, data: List[int], alignment: int = ...) -> Asset:
        ...
    
    def size(self) -> int:
        ...
    


class BoardConfig:
    class GPIO:
        class Direction:
            __members__: ClassVar[dict] = ...
            INPUT: ClassVar[BoardConfig.GPIO.Direction] = ...
            OUTPUT: ClassVar[BoardConfig.GPIO.Direction] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        class Drive:
            __members__: ClassVar[dict] = ...
            MA_12: ClassVar[BoardConfig.GPIO.Drive] = ...
            MA_2: ClassVar[BoardConfig.GPIO.Drive] = ...
            MA_4: ClassVar[BoardConfig.GPIO.Drive] = ...
            MA_8: ClassVar[BoardConfig.GPIO.Drive] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        class Level:
            __members__: ClassVar[dict] = ...
            HIGH: ClassVar[BoardConfig.GPIO.Level] = ...
            LOW: ClassVar[BoardConfig.GPIO.Level] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        class Mode:
            __members__: ClassVar[dict] = ...
            ALT_MODE_0: ClassVar[BoardConfig.GPIO.Mode] = ...
            ALT_MODE_1: ClassVar[BoardConfig.GPIO.Mode] = ...
            ALT_MODE_2: ClassVar[BoardConfig.GPIO.Mode] = ...
            ALT_MODE_3: ClassVar[BoardConfig.GPIO.Mode] = ...
            ALT_MODE_4: ClassVar[BoardConfig.GPIO.Mode] = ...
            ALT_MODE_5: ClassVar[BoardConfig.GPIO.Mode] = ...
            ALT_MODE_6: ClassVar[BoardConfig.GPIO.Mode] = ...
            DIRECT: ClassVar[BoardConfig.GPIO.Mode] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        class Pull:
            __members__: ClassVar[dict] = ...
            BUS_KEEPER: ClassVar[BoardConfig.GPIO.Pull] = ...
            NO_PULL: ClassVar[BoardConfig.GPIO.Pull] = ...
            PULL_DOWN: ClassVar[BoardConfig.GPIO.Pull] = ...
            PULL_UP: ClassVar[BoardConfig.GPIO.Pull] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        ALT_MODE_0: ClassVar[BoardConfig.GPIO.Mode] = ...
        ALT_MODE_1: ClassVar[BoardConfig.GPIO.Mode] = ...
        ALT_MODE_2: ClassVar[BoardConfig.GPIO.Mode] = ...
        ALT_MODE_3: ClassVar[BoardConfig.GPIO.Mode] = ...
        ALT_MODE_4: ClassVar[BoardConfig.GPIO.Mode] = ...
        ALT_MODE_5: ClassVar[BoardConfig.GPIO.Mode] = ...
        ALT_MODE_6: ClassVar[BoardConfig.GPIO.Mode] = ...
        BUS_KEEPER: ClassVar[BoardConfig.GPIO.Pull] = ...
        DIRECT: ClassVar[BoardConfig.GPIO.Mode] = ...
        HIGH: ClassVar[BoardConfig.GPIO.Level] = ...
        INPUT: ClassVar[BoardConfig.GPIO.Direction] = ...
        LOW: ClassVar[BoardConfig.GPIO.Level] = ...
        MA_12: ClassVar[BoardConfig.GPIO.Drive] = ...
        MA_2: ClassVar[BoardConfig.GPIO.Drive] = ...
        MA_4: ClassVar[BoardConfig.GPIO.Drive] = ...
        MA_8: ClassVar[BoardConfig.GPIO.Drive] = ...
        NO_PULL: ClassVar[BoardConfig.GPIO.Pull] = ...
        OUTPUT: ClassVar[BoardConfig.GPIO.Direction] = ...
        PULL_DOWN: ClassVar[BoardConfig.GPIO.Pull] = ...
        PULL_UP: ClassVar[BoardConfig.GPIO.Pull] = ...
        direction: BoardConfig.GPIO.Direction
        drive: BoardConfig.GPIO.Drive
        level: BoardConfig.GPIO.Level
        mode: BoardConfig.GPIO.Mode
        pull: BoardConfig.GPIO.Pull
        schmitt: bool
        slewFast: bool
        @overload
        def __init__(self) -> None:
            ...
        
        @overload
        def __init__(self, arg0: BoardConfig.GPIO.Direction) -> None:
            ...
        
        @overload
        def __init__(self, arg0: BoardConfig.GPIO.Direction, arg1: BoardConfig.GPIO.Level) -> None:
            ...
        
        @overload
        def __init__(self, arg0: BoardConfig.GPIO.Direction, arg1: BoardConfig.GPIO.Level, arg2: BoardConfig.GPIO.Pull) -> None:
            ...
        
        @overload
        def __init__(self, arg0: BoardConfig.GPIO.Direction, arg1: BoardConfig.GPIO.Mode) -> None:
            ...
        
        @overload
        def __init__(self, arg0: BoardConfig.GPIO.Direction, arg1: BoardConfig.GPIO.Mode, arg2: BoardConfig.GPIO.Pull) -> None:
            ...
        
    
    
    class GPIOMap:
        def __init__(self) -> None:
            ...
        
        def items(self) -> BoardConfig.ItemsView_GPIOMap:
            ...
        
        def keys(self) -> BoardConfig.KeysView_GPIOMap:
            ...
        
        def values(self) -> BoardConfig.ValuesView_GPIOMap:
            ...
        
        def __bool__(self) -> bool:
            ...
        
        @overload
        def __contains__(self, arg0: int) -> bool:
            ...
        
        @overload
        def __contains__(self, arg0: object) -> bool:
            ...
        
        def __delitem__(self, arg0: int) -> None:
            ...
        
        def __getitem__(self, arg0: int) -> BoardConfig.GPIO:
            ...
        
        def __iter__(self) -> Iterator:
            ...
        
        def __len__(self) -> int:
            ...
        
        def __setitem__(self, arg0: int, arg1: BoardConfig.GPIO) -> None:
            ...
        
    
    
    class ItemsView_GPIOMap:
        def __init__(self, *args, **kwargs) -> None:
            ...
        
        def __iter__(self) -> Iterator:
            ...
        
        def __len__(self) -> int:
            ...
        
    
    
    class ItemsView_UARTMap:
        def __init__(self, *args, **kwargs) -> None:
            ...
        
        def __iter__(self) -> Iterator:
            ...
        
        def __len__(self) -> int:
            ...
        
    
    
    class KeysView_GPIOMap:
        def __init__(self, *args, **kwargs) -> None:
            ...
        
        @overload
        def __contains__(self, arg0: int) -> bool:
            ...
        
        @overload
        def __contains__(self, arg0: object) -> bool:
            ...
        
        def __iter__(self) -> Iterator:
            ...
        
        def __len__(self) -> int:
            ...
        
    
    
    class KeysView_UARTMap:
        def __init__(self, *args, **kwargs) -> None:
            ...
        
        @overload
        def __contains__(self, arg0: int) -> bool:
            ...
        
        @overload
        def __contains__(self, arg0: object) -> bool:
            ...
        
        def __iter__(self) -> Iterator:
            ...
        
        def __len__(self) -> int:
            ...
        
    
    
    class Network:
        mtu: int
        xlinkTcpNoDelay: bool
        def __init__(self) -> None:
            ...
        
    
    
    class UART:
        tmp: int
        def __init__(self) -> None:
            ...
        
    
    
    class UARTMap:
        def __init__(self) -> None:
            ...
        
        def items(self) -> BoardConfig.ItemsView_UARTMap:
            ...
        
        def keys(self) -> BoardConfig.KeysView_UARTMap:
            ...
        
        def values(self) -> BoardConfig.ValuesView_UARTMap:
            ...
        
        def __bool__(self) -> bool:
            ...
        
        @overload
        def __contains__(self, arg0: int) -> bool:
            ...
        
        @overload
        def __contains__(self, arg0: object) -> bool:
            ...
        
        def __delitem__(self, arg0: int) -> None:
            ...
        
        def __getitem__(self, arg0: int) -> BoardConfig.UART:
            ...
        
        def __iter__(self) -> Iterator:
            ...
        
        def __len__(self) -> int:
            ...
        
        def __setitem__(self, arg0: int, arg1: BoardConfig.UART) -> None:
            ...
        
    
    
    class USB:
        flashBootedPid: int
        flashBootedVid: int
        manufacturer: str
        maxSpeed: UsbSpeed
        pid: int
        productName: str
        vid: int
        def __init__(self) -> None:
            ...
        
    
    
    class UVC:
        cameraName: str
        enable: bool
        frameType: RawImgFrame.Type
        height: int
        width: int
        @overload
        def __init__(self) -> None:
            ...
        
        @overload
        def __init__(self, arg0: int, arg1: int) -> None:
            ...
        
    
    
    class ValuesView_GPIOMap:
        def __init__(self, *args, **kwargs) -> None:
            ...
        
        def __iter__(self) -> Iterator:
            ...
        
        def __len__(self) -> int:
            ...
        
    
    
    class ValuesView_UARTMap:
        def __init__(self, *args, **kwargs) -> None:
            ...
        
        def __iter__(self) -> Iterator:
            ...
        
        def __len__(self) -> int:
            ...
        
    
    
    emmc: Optional[bool]
    gpio: BoardConfig.GPIOMap
    logDevicePrints: Optional[bool]
    logPath: Optional[str]
    logSizeMax: Optional[int]
    logVerbosity: Optional[LogLevel]
    mipi4LaneRgb: Optional[bool]
    network: BoardConfig.Network
    pcieInternalClock: Optional[bool]
    sysctl: List[str]
    uart: BoardConfig.UARTMap
    usb: BoardConfig.USB
    usb3PhyInternalClock: Optional[bool]
    uvc: Optional[BoardConfig.UVC]
    watchdogInitialDelayMs: Optional[int]
    watchdogTimeoutMs: Optional[int]
    def __init__(self) -> None:
        ...
    


class Buffer(ADatatype):
    def __init__(self) -> None:
        ...
    
    def getData(self) -> numpy.ndarray[numpy.uint8]:
        ...
    
    @overload
    def setData(self, arg0: List[int]) -> None:
        ...
    
    @overload
    def setData(self, arg0: numpy.ndarray[numpy.uint8]) -> None:
        ...
    


class CalibrationHandler:
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, arg0: Path) -> None:
        ...
    
    @overload
    def __init__(self, arg0: Path, arg1: Path) -> None:
        ...
    
    @overload
    def __init__(self, arg0: EepromData) -> None:
        ...
    
    def eepromToJson(self) -> json:
        ...
    
    def eepromToJsonFile(self, destPath: Path) -> bool:
        ...
    
    @classmethod
    def fromJson(cls, arg0: json) -> CalibrationHandler:
        ...
    
    def getBaselineDistance(self, cam1: CameraBoardSocket = ..., cam2: CameraBoardSocket = ..., useSpecTranslation: bool = ...) -> float:
        ...
    
    def getCameraExtrinsics(self, srcCamera: CameraBoardSocket, dstCamera: CameraBoardSocket, useSpecTranslation: bool = ...) -> List[List[float]]:
        ...
    
    @overload
    def getCameraIntrinsics(self, cameraId: CameraBoardSocket, resizeWidth: int = ..., resizeHeight: int = ..., topLeftPixelId: Point2f = ..., bottomRightPixelId: Point2f = ..., keepAspectRatio: bool = ...) -> List[List[float]]:
        ...
    
    @overload
    def getCameraIntrinsics(self, cameraId: CameraBoardSocket, destShape: Size2f, topLeftPixelId: Point2f = ..., bottomRightPixelId: Point2f = ..., keepAspectRatio: bool = ...) -> List[List[float]]:
        ...
    
    @overload
    def getCameraIntrinsics(self, cameraId: CameraBoardSocket, destShape: Tuple[int, int], topLeftPixelId: Point2f = ..., bottomRightPixelId: Point2f = ..., keepAspectRatio: bool = ...) -> List[List[float]]:
        ...
    
    def getCameraToImuExtrinsics(self, cameraId: CameraBoardSocket, useSpecTranslation: bool = ...) -> List[List[float]]:
        ...
    
    def getCameraTranslationVector(self, srcCamera: CameraBoardSocket, dstCamera: CameraBoardSocket, useSpecTranslation: bool = ...) -> List[float]:
        ...
    
    def getDefaultIntrinsics(self, cameraId: CameraBoardSocket) -> Tuple[List[List[float]], int, int]:
        ...
    
    def getDistortionCoefficients(self, cameraId: CameraBoardSocket) -> List[float]:
        ...
    
    def getDistortionModel(self, cameraId: CameraBoardSocket) -> CameraModel:
        ...
    
    def getEepromData(self) -> EepromData:
        ...
    
    def getFov(self, cameraId: CameraBoardSocket, useSpec: bool = ...) -> float:
        ...
    
    def getImuToCameraExtrinsics(self, cameraId: CameraBoardSocket, useSpecTranslation: bool = ...) -> List[List[float]]:
        ...
    
    def getLensPosition(self, cameraId: CameraBoardSocket) -> int:
        ...
    
    def getStereoLeftCameraId(self) -> CameraBoardSocket:
        ...
    
    def getStereoLeftRectificationRotation(self) -> List[List[float]]:
        ...
    
    def getStereoRightCameraId(self) -> CameraBoardSocket:
        ...
    
    def getStereoRightRectificationRotation(self) -> List[List[float]]:
        ...
    
    @overload
    def setBoardInfo(self, boardName: str, boardRev: str) -> None:
        ...
    
    @overload
    def setBoardInfo(self, productName: str, boardName: str, boardRev: str, boardConf: str, hardwareConf: str, batchName: str, batchTime: int, boardOptions: int, boardCustom: str = ...) -> None:
        ...
    
    def setCameraExtrinsics(self, srcCameraId: CameraBoardSocket, destCameraId: CameraBoardSocket, rotationMatrix: List[List[float]], translation: List[float], specTranslation: List[float] = ...) -> None:
        ...
    
    @overload
    def setCameraIntrinsics(self, cameraId: CameraBoardSocket, intrinsics: List[List[float]], frameSize: Size2f) -> None:
        ...
    
    @overload
    def setCameraIntrinsics(self, cameraId: CameraBoardSocket, intrinsics: List[List[float]], width: int, height: int) -> None:
        ...
    
    @overload
    def setCameraIntrinsics(self, cameraId: CameraBoardSocket, intrinsics: List[List[float]], frameSize: Tuple[int, int]) -> None:
        ...
    
    def setCameraType(self, cameraId: CameraBoardSocket, cameraModel: CameraModel) -> None:
        ...
    
    def setDistortionCoefficients(self, cameraId: CameraBoardSocket, distortionCoefficients: List[float]) -> None:
        ...
    
    def setFov(self, cameraId: CameraBoardSocket, hfov: float) -> None:
        ...
    
    def setImuExtrinsics(self, destCameraId: CameraBoardSocket, rotationMatrix: List[List[float]], translation: List[float], specTranslation: List[float] = ...) -> None:
        ...
    
    def setLensPosition(self, cameraId: CameraBoardSocket, lensPosition: int) -> None:
        ...
    
    def setProductName(self, productName: str) -> None:
        ...
    
    def setStereoLeft(self, cameraId: CameraBoardSocket, rectifiedRotation: List[List[float]]) -> None:
        ...
    
    def setStereoRight(self, cameraId: CameraBoardSocket, rectifiedRotation: List[List[float]]) -> None:
        ...
    


class CameraBoardSocket:
    CENTER: ClassVar[CameraBoardSocket] = ...
    LEFT: ClassVar[CameraBoardSocket] = ...
    RGB: ClassVar[CameraBoardSocket] = ...
    RIGHT: ClassVar[CameraBoardSocket] = ...
    __members__: ClassVar[dict] = ...
    AUTO: ClassVar[CameraBoardSocket] = ...
    CAM_A: ClassVar[CameraBoardSocket] = ...
    CAM_B: ClassVar[CameraBoardSocket] = ...
    CAM_C: ClassVar[CameraBoardSocket] = ...
    CAM_D: ClassVar[CameraBoardSocket] = ...
    CAM_E: ClassVar[CameraBoardSocket] = ...
    CAM_F: ClassVar[CameraBoardSocket] = ...
    CAM_G: ClassVar[CameraBoardSocket] = ...
    CAM_H: ClassVar[CameraBoardSocket] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class CameraControl(Buffer):
    class AntiBandingMode:
        __members__: ClassVar[dict] = ...
        AUTO: ClassVar[RawCameraControl.AntiBandingMode] = ...
        MAINS_50_HZ: ClassVar[RawCameraControl.AntiBandingMode] = ...
        MAINS_60_HZ: ClassVar[RawCameraControl.AntiBandingMode] = ...
        OFF: ClassVar[RawCameraControl.AntiBandingMode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class AutoFocusMode:
        __members__: ClassVar[dict] = ...
        AUTO: ClassVar[RawCameraControl.AutoFocusMode] = ...
        CONTINUOUS_PICTURE: ClassVar[RawCameraControl.AutoFocusMode] = ...
        CONTINUOUS_VIDEO: ClassVar[RawCameraControl.AutoFocusMode] = ...
        EDOF: ClassVar[RawCameraControl.AutoFocusMode] = ...
        MACRO: ClassVar[RawCameraControl.AutoFocusMode] = ...
        OFF: ClassVar[RawCameraControl.AutoFocusMode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class AutoWhiteBalanceMode:
        __members__: ClassVar[dict] = ...
        AUTO: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        CLOUDY_DAYLIGHT: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        DAYLIGHT: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        FLUORESCENT: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        INCANDESCENT: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        OFF: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        SHADE: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        TWILIGHT: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        WARM_FLUORESCENT: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class Command:
        __members__: ClassVar[dict] = ...
        AE_AUTO: ClassVar[RawCameraControl.Command] = ...
        AE_LOCK: ClassVar[RawCameraControl.Command] = ...
        AE_MANUAL: ClassVar[RawCameraControl.Command] = ...
        AE_REGION: ClassVar[RawCameraControl.Command] = ...
        AE_TARGET_FPS_RANGE: ClassVar[RawCameraControl.Command] = ...
        AF_MODE: ClassVar[RawCameraControl.Command] = ...
        AF_REGION: ClassVar[RawCameraControl.Command] = ...
        AF_TRIGGER: ClassVar[RawCameraControl.Command] = ...
        ANTIBANDING_MODE: ClassVar[RawCameraControl.Command] = ...
        AWB_LOCK: ClassVar[RawCameraControl.Command] = ...
        AWB_MODE: ClassVar[RawCameraControl.Command] = ...
        BRIGHTNESS: ClassVar[RawCameraControl.Command] = ...
        CAPTURE_INTENT: ClassVar[RawCameraControl.Command] = ...
        CHROMA_DENOISE: ClassVar[RawCameraControl.Command] = ...
        CONTRAST: ClassVar[RawCameraControl.Command] = ...
        CONTROL_MODE: ClassVar[RawCameraControl.Command] = ...
        CUSTOM_CAPTURE: ClassVar[RawCameraControl.Command] = ...
        CUSTOM_CAPT_MODE: ClassVar[RawCameraControl.Command] = ...
        CUSTOM_EXP_BRACKETS: ClassVar[RawCameraControl.Command] = ...
        CUSTOM_USECASE: ClassVar[RawCameraControl.Command] = ...
        EFFECT_MODE: ClassVar[RawCameraControl.Command] = ...
        EXPOSURE_COMPENSATION: ClassVar[RawCameraControl.Command] = ...
        FRAME_DURATION: ClassVar[RawCameraControl.Command] = ...
        LUMA_DENOISE: ClassVar[RawCameraControl.Command] = ...
        MOVE_LENS: ClassVar[RawCameraControl.Command] = ...
        NOISE_REDUCTION_STRENGTH: ClassVar[RawCameraControl.Command] = ...
        RESOLUTION: ClassVar[RawCameraControl.Command] = ...
        SATURATION: ClassVar[RawCameraControl.Command] = ...
        SCENE_MODE: ClassVar[RawCameraControl.Command] = ...
        SENSITIVITY: ClassVar[RawCameraControl.Command] = ...
        SHARPNESS: ClassVar[RawCameraControl.Command] = ...
        START_STREAM: ClassVar[RawCameraControl.Command] = ...
        STILL_CAPTURE: ClassVar[RawCameraControl.Command] = ...
        STOP_STREAM: ClassVar[RawCameraControl.Command] = ...
        STREAM_FORMAT: ClassVar[RawCameraControl.Command] = ...
        WB_COLOR_TEMP: ClassVar[RawCameraControl.Command] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class EffectMode:
        __members__: ClassVar[dict] = ...
        AQUA: ClassVar[RawCameraControl.EffectMode] = ...
        BLACKBOARD: ClassVar[RawCameraControl.EffectMode] = ...
        MONO: ClassVar[RawCameraControl.EffectMode] = ...
        NEGATIVE: ClassVar[RawCameraControl.EffectMode] = ...
        OFF: ClassVar[RawCameraControl.EffectMode] = ...
        POSTERIZE: ClassVar[RawCameraControl.EffectMode] = ...
        SEPIA: ClassVar[RawCameraControl.EffectMode] = ...
        SOLARIZE: ClassVar[RawCameraControl.EffectMode] = ...
        WHITEBOARD: ClassVar[RawCameraControl.EffectMode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class FrameSyncMode:
        __members__: ClassVar[dict] = ...
        INPUT: ClassVar[RawCameraControl.FrameSyncMode] = ...
        OFF: ClassVar[RawCameraControl.FrameSyncMode] = ...
        OUTPUT: ClassVar[RawCameraControl.FrameSyncMode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class SceneMode:
        __members__: ClassVar[dict] = ...
        ACTION: ClassVar[RawCameraControl.SceneMode] = ...
        BARCODE: ClassVar[RawCameraControl.SceneMode] = ...
        BEACH: ClassVar[RawCameraControl.SceneMode] = ...
        CANDLELIGHT: ClassVar[RawCameraControl.SceneMode] = ...
        FACE_PRIORITY: ClassVar[RawCameraControl.SceneMode] = ...
        FIREWORKS: ClassVar[RawCameraControl.SceneMode] = ...
        LANDSCAPE: ClassVar[RawCameraControl.SceneMode] = ...
        NIGHT: ClassVar[RawCameraControl.SceneMode] = ...
        NIGHT_PORTRAIT: ClassVar[RawCameraControl.SceneMode] = ...
        PARTY: ClassVar[RawCameraControl.SceneMode] = ...
        PORTRAIT: ClassVar[RawCameraControl.SceneMode] = ...
        SNOW: ClassVar[RawCameraControl.SceneMode] = ...
        SPORTS: ClassVar[RawCameraControl.SceneMode] = ...
        STEADYPHOTO: ClassVar[RawCameraControl.SceneMode] = ...
        SUNSET: ClassVar[RawCameraControl.SceneMode] = ...
        THEATRE: ClassVar[RawCameraControl.SceneMode] = ...
        UNSUPPORTED: ClassVar[RawCameraControl.SceneMode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    def __init__(self) -> None:
        ...
    
    def get(self) -> RawCameraControl:
        ...
    
    def getCaptureStill(self) -> bool:
        ...
    
    def getExposureTime(self) -> datetime.timedelta:
        ...
    
    def getLensPosition(self) -> int:
        ...
    
    def getSensitivity(self) -> int:
        ...
    
    def set(self, config: RawCameraControl) -> CameraControl:
        ...
    
    def setAntiBandingMode(self, mode: RawCameraControl.AntiBandingMode) -> CameraControl:
        ...
    
    def setAutoExposureCompensation(self, compensation: int) -> CameraControl:
        ...
    
    def setAutoExposureEnable(self) -> CameraControl:
        ...
    
    def setAutoExposureLock(self, lock: bool) -> CameraControl:
        ...
    
    def setAutoExposureRegion(self, startX: int, startY: int, width: int, height: int) -> CameraControl:
        ...
    
    def setAutoFocusLensRange(self, infinityPosition: int, macroPosition: int) -> CameraControl:
        ...
    
    def setAutoFocusMode(self, mode: RawCameraControl.AutoFocusMode) -> CameraControl:
        ...
    
    def setAutoFocusRegion(self, startX: int, startY: int, width: int, height: int) -> CameraControl:
        ...
    
    def setAutoFocusTrigger(self) -> CameraControl:
        ...
    
    def setAutoWhiteBalanceLock(self, lock: bool) -> CameraControl:
        ...
    
    def setAutoWhiteBalanceMode(self, mode: RawCameraControl.AutoWhiteBalanceMode) -> CameraControl:
        ...
    
    def setBrightness(self, value: int) -> CameraControl:
        ...
    
    def setCaptureStill(self, capture: bool) -> CameraControl:
        ...
    
    def setChromaDenoise(self, value: int) -> CameraControl:
        ...
    
    def setContrast(self, value: int) -> CameraControl:
        ...
    
    def setEffectMode(self, mode: RawCameraControl.EffectMode) -> CameraControl:
        ...
    
    def setExternalTrigger(self, numFramesBurst: int, numFramesDiscard: int) -> CameraControl:
        ...
    
    def setFrameSyncMode(self, mode: RawCameraControl.FrameSyncMode) -> CameraControl:
        ...
    
    def setLumaDenoise(self, value: int) -> CameraControl:
        ...
    
    @overload
    def setManualExposure(self, exposureTimeUs: int, sensitivityIso: int) -> CameraControl:
        ...
    
    @overload
    def setManualExposure(self, exposureTime: datetime.timedelta, sensitivityIso: int) -> None:
        ...
    
    def setManualFocus(self, lensPosition: int) -> CameraControl:
        ...
    
    def setManualWhiteBalance(self, colorTemperatureK: int) -> CameraControl:
        ...
    
    def setSaturation(self, value: int) -> CameraControl:
        ...
    
    def setSceneMode(self, mode: RawCameraControl.SceneMode) -> CameraControl:
        ...
    
    def setSharpness(self, value: int) -> CameraControl:
        ...
    
    def setStartStreaming(self) -> CameraControl:
        ...
    
    def setStopStreaming(self) -> CameraControl:
        ...
    
    def setStrobeDisable(self) -> CameraControl:
        ...
    
    def setStrobeExternal(self, gpioNumber: int, activeLevel: int) -> CameraControl:
        ...
    
    def setStrobeSensor(self, activeLevel: int) -> CameraControl:
        ...
    


class CameraExposureOffset:
    __members__: ClassVar[dict] = ...
    END: ClassVar[CameraExposureOffset] = ...
    MIDDLE: ClassVar[CameraExposureOffset] = ...
    START: ClassVar[CameraExposureOffset] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class CameraFeatures:
    configs: List[CameraSensorConfig]
    hasAutofocus: bool
    height: int
    name: str
    orientation: CameraImageOrientation
    sensorName: str
    socket: CameraBoardSocket
    supportedTypes: List[CameraSensorType]
    width: int
    def __init__(self) -> None:
        ...
    


class CameraImageOrientation:
    __members__: ClassVar[dict] = ...
    AUTO: ClassVar[CameraImageOrientation] = ...
    HORIZONTAL_MIRROR: ClassVar[CameraImageOrientation] = ...
    NORMAL: ClassVar[CameraImageOrientation] = ...
    ROTATE_180_DEG: ClassVar[CameraImageOrientation] = ...
    VERTICAL_FLIP: ClassVar[CameraImageOrientation] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class CameraInfo:
    cameraType: CameraModel
    distortionCoeff: List[float]
    extrinsics: Extrinsics
    height: int
    intrinsicMatrix: List[List[float]]
    specHfovDeg: float
    width: int
    def __init__(self) -> None:
        ...
    


class CameraModel:
    __members__: ClassVar[dict] = ...
    Equirectangular: ClassVar[CameraModel] = ...
    Fisheye: ClassVar[CameraModel] = ...
    Perspective: ClassVar[CameraModel] = ...
    RadialDivision: ClassVar[CameraModel] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class CameraProperties:
    class ColorOrder:
        __members__: ClassVar[dict] = ...
        BGR: ClassVar[CameraProperties.ColorOrder] = ...
        RGB: ClassVar[CameraProperties.ColorOrder] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class WarpMeshSource:
        __members__: ClassVar[dict] = ...
        AUTO: ClassVar[CameraProperties.WarpMeshSource] = ...
        CALIBRATION: ClassVar[CameraProperties.WarpMeshSource] = ...
        NONE: ClassVar[CameraProperties.WarpMeshSource] = ...
        URI: ClassVar[CameraProperties.WarpMeshSource] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    boardSocket: CameraBoardSocket
    calibAlpha: float
    colorOrder: CameraProperties.ColorOrder
    fp16: bool
    fps: float
    imageOrientation: CameraImageOrientation
    initialControl: RawCameraControl
    interleaved: bool
    isp3aFps: int
    ispScale: Any
    numFramesPoolIsp: int
    numFramesPoolPreview: int
    numFramesPoolRaw: int
    numFramesPoolStill: int
    numFramesPoolVideo: int
    previewHeight: int
    previewKeepAspectRatio: bool
    previewWidth: int
    sensorCropX: float
    sensorCropY: float
    stillHeight: int
    stillWidth: int
    videoHeight: int
    videoWidth: int
    warpMeshHeight: int
    warpMeshSource: CameraProperties.WarpMeshSource
    warpMeshStepHeight: int
    warpMeshStepWidth: int
    warpMeshUri: str
    warpMeshWidth: int
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CameraSensorConfig:
    height: int
    maxFps: int
    minFps: int
    type: CameraSensorType
    width: int
    def __init__(self) -> None:
        ...
    


class CameraSensorType:
    __members__: ClassVar[dict] = ...
    COLOR: ClassVar[CameraSensorType] = ...
    MONO: ClassVar[CameraSensorType] = ...
    THERMAL: ClassVar[CameraSensorType] = ...
    TOF: ClassVar[CameraSensorType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class ChipTemperature:
    average: float
    css: float
    dss: float
    mss: float
    upa: float
    def __init__(self) -> None:
        ...
    


class Clock:
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def now(self) -> datetime.timedelta:
        ...
    


class ColorCameraProperties:
    class ColorOrder:
        __members__: ClassVar[dict] = ...
        BGR: ClassVar[ColorCameraProperties.ColorOrder] = ...
        RGB: ClassVar[ColorCameraProperties.ColorOrder] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class SensorResolution:
        __members__: ClassVar[dict] = ...
        THE_1080_P: ClassVar[ColorCameraProperties.SensorResolution] = ...
        THE_1200_P: ClassVar[ColorCameraProperties.SensorResolution] = ...
        THE_12_MP: ClassVar[ColorCameraProperties.SensorResolution] = ...
        THE_13_MP: ClassVar[ColorCameraProperties.SensorResolution] = ...
        THE_1440X1080: ClassVar[ColorCameraProperties.SensorResolution] = ...
        THE_4000X3000: ClassVar[ColorCameraProperties.SensorResolution] = ...
        THE_48_MP: ClassVar[ColorCameraProperties.SensorResolution] = ...
        THE_4_K: ClassVar[ColorCameraProperties.SensorResolution] = ...
        THE_5312X6000: ClassVar[ColorCameraProperties.SensorResolution] = ...
        THE_5_MP: ClassVar[ColorCameraProperties.SensorResolution] = ...
        THE_720_P: ClassVar[ColorCameraProperties.SensorResolution] = ...
        THE_800_P: ClassVar[ColorCameraProperties.SensorResolution] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    boardSocket: CameraBoardSocket
    colorOrder: ColorCameraProperties.ColorOrder
    eventFilter: List[FrameEvent]
    fp16: bool
    fps: float
    imageOrientation: CameraImageOrientation
    initialControl: RawCameraControl
    interleaved: bool
    isp3aFps: int
    ispScale: Any
    numFramesPoolIsp: int
    numFramesPoolPreview: int
    numFramesPoolRaw: int
    numFramesPoolStill: int
    numFramesPoolVideo: int
    previewHeight: int
    previewKeepAspectRatio: bool
    previewWidth: int
    resolution: ColorCameraProperties.SensorResolution
    sensorCropX: float
    sensorCropY: float
    stillHeight: int
    stillWidth: int
    videoHeight: int
    videoWidth: int
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Colormap:
    __members__: ClassVar[dict] = ...
    JET: ClassVar[Colormap] = ...
    NONE: ClassVar[Colormap] = ...
    STEREO_JET: ClassVar[Colormap] = ...
    STEREO_TURBO: ClassVar[Colormap] = ...
    TURBO: ClassVar[Colormap] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class CpuUsage:
    average: float
    msTime: int
    def __init__(self) -> None:
        ...
    


class CrashDump:
    class CrashReport:
        class ErrorSourceInfo:
            class AssertContext:
                fileName: str
                functionName: str
                line: int
                def __init__(self) -> None:
                    ...
                
            
            
            class TrapContext:
                trapAddress: int
                trapName: str
                trapNumber: int
                def __init__(self) -> None:
                    ...
                
            
            
            assertContext: CrashDump.CrashReport.ErrorSourceInfo.AssertContext
            errorId: int
            trapContext: CrashDump.CrashReport.ErrorSourceInfo.TrapContext
            def __init__(self) -> None:
                ...
            
        
        
        class ThreadCallstack:
            class CallstackContext:
                callSite: int
                calledTarget: int
                context: str
                framePointer: int
                def __init__(self) -> None:
                    ...
                
            
            
            callStack: List[CrashDump.CrashReport.ThreadCallstack.CallstackContext]
            instructionPointer: int
            stackBottom: int
            stackPointer: int
            stackTop: int
            threadId: int
            threadName: str
            threadStatus: str
            def __init__(self) -> None:
                ...
            
        
        
        crashedThreadId: int
        errorSource: str
        processor: ProcessorType
        threadCallstack: List[CrashDump.CrashReport.ThreadCallstack]
        def __init__(self) -> None:
            ...
        
    
    
    crashReports: List[CrashDump.CrashReport]
    depthaiCommitHash: str
    deviceId: str
    def __init__(self) -> None:
        ...
    
    def serializeToJson(self) -> json:
        ...
    


class DataInputQueue:
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def close(self) -> None:
        ...
    
    def getBlocking(self) -> bool:
        ...
    
    def getMaxSize(self) -> int:
        ...
    
    def getName(self) -> str:
        ...
    
    def isClosed(self) -> bool:
        ...
    
    @overload
    def send(self, msg: ADatatype) -> None:
        ...
    
    @overload
    def send(self, rawMsg: RawBuffer) -> None:
        ...
    
    def setBlocking(self, blocking: bool) -> None:
        ...
    
    def setMaxSize(self, maxSize: int) -> None:
        ...
    


class DataOutputQueue:
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @overload
    def addCallback(self, callback: function) -> int:
        ...
    
    @overload
    def addCallback(self, callback: function) -> int:
        ...
    
    @overload
    def addCallback(self, callback: function) -> int:
        ...
    
    def close(self) -> None:
        ...
    
    def get(self) -> ADatatype:
        ...
    
    def getAll(self) -> List[ADatatype]:
        ...
    
    def getBlocking(self) -> bool:
        ...
    
    def getMaxSize(self) -> int:
        ...
    
    def getName(self) -> str:
        ...
    
    def has(self) -> bool:
        ...
    
    def isClosed(self) -> bool:
        ...
    
    def removeCallback(self, callbackId: int) -> bool:
        ...
    
    def setBlocking(self, blocking: bool) -> None:
        ...
    
    def setMaxSize(self, maxSize: int) -> None:
        ...
    
    def tryGet(self) -> ADatatype:
        ...
    
    def tryGetAll(self) -> List[ADatatype]:
        ...
    


class DatatypeEnum:
    __members__: ClassVar[dict] = ...
    AprilTagConfig: ClassVar[DatatypeEnum] = ...
    AprilTags: ClassVar[DatatypeEnum] = ...
    Buffer: ClassVar[DatatypeEnum] = ...
    CameraControl: ClassVar[DatatypeEnum] = ...
    EdgeDetectorConfig: ClassVar[DatatypeEnum] = ...
    FeatureTrackerConfig: ClassVar[DatatypeEnum] = ...
    IMUData: ClassVar[DatatypeEnum] = ...
    ImageManipConfig: ClassVar[DatatypeEnum] = ...
    ImgDetections: ClassVar[DatatypeEnum] = ...
    ImgFrame: ClassVar[DatatypeEnum] = ...
    NNData: ClassVar[DatatypeEnum] = ...
    SpatialImgDetections: ClassVar[DatatypeEnum] = ...
    SpatialLocationCalculatorConfig: ClassVar[DatatypeEnum] = ...
    SpatialLocationCalculatorData: ClassVar[DatatypeEnum] = ...
    StereoDepthConfig: ClassVar[DatatypeEnum] = ...
    SystemInformation: ClassVar[DatatypeEnum] = ...
    TrackedFeatures: ClassVar[DatatypeEnum] = ...
    Tracklets: ClassVar[DatatypeEnum] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class DetectionNetworkProperties(NeuralNetworkProperties):
    parser: DetectionParserOptions
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DetectionNetworkType:
    __members__: ClassVar[dict] = ...
    MOBILENET: ClassVar[DetectionNetworkType] = ...
    YOLO: ClassVar[DetectionNetworkType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class DetectionParserOptions:
    anchorMasks: Dict[str, List[int]]
    anchors: List[float]
    classes: int
    confidenceThreshold: float
    coordinates: int
    iouThreshold: float
    nnFamily: DetectionNetworkType
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DetectionParserProperties:
    parser: DetectionParserOptions
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Device(DeviceBase):
    class Config:
        board: BoardConfig
        logLevel: Optional[LogLevel]
        nonExclusiveMode: bool
        outputLogLevel: Optional[LogLevel]
        version: OpenVINO.Version
        def __init__(self) -> None:
            ...
        
    
    
    @overload
    def __init__(self, pipeline: Pipeline) -> None:
        ...
    
    @overload
    def __init__(self, pipeline: Pipeline, usb2Mode: bool) -> None:
        ...
    
    @overload
    def __init__(self, pipeline: Pipeline, maxUsbSpeed: UsbSpeed) -> None:
        ...
    
    @overload
    def __init__(self, pipeline: Pipeline, pathToCmd: Path) -> None:
        ...
    
    @overload
    def __init__(self, pipeline: Pipeline, devInfo: DeviceInfo, usb2Mode: bool = ...) -> None:
        ...
    
    @overload
    def __init__(self, pipeline: Pipeline, deviceInfo: DeviceInfo, maxUsbSpeed: UsbSpeed) -> None:
        ...
    
    @overload
    def __init__(self, pipeline: Pipeline, devInfo: DeviceInfo, pathToCmd: Path) -> None:
        ...
    
    @overload
    def __init__(self, version: OpenVINO.Version = ...) -> None:
        ...
    
    @overload
    def __init__(self, version: OpenVINO.Version, usb2Mode: bool = ...) -> None:
        ...
    
    @overload
    def __init__(self, version: OpenVINO.Version, maxUsbSpeed: UsbSpeed) -> None:
        ...
    
    @overload
    def __init__(self, version: OpenVINO.Version, pathToCmd: Path) -> None:
        ...
    
    @overload
    def __init__(self, version: OpenVINO.Version, deviceInfo: DeviceInfo, usb2Mode: bool = ...) -> None:
        ...
    
    @overload
    def __init__(self, version: OpenVINO.Version, deviceInfo: DeviceInfo, maxUsbSpeed: UsbSpeed) -> None:
        ...
    
    @overload
    def __init__(self, version: OpenVINO.Version, deviceDesc: DeviceInfo, pathToCmd: Path) -> None:
        ...
    
    @overload
    def __init__(self, config: Device.Config) -> None:
        ...
    
    @overload
    def __init__(self, config: Device.Config, deviceInfo: DeviceInfo) -> None:
        ...
    
    @overload
    def __init__(self, deviceInfo: DeviceInfo) -> None:
        ...
    
    @overload
    def __init__(self, deviceInfo: DeviceInfo, maxUsbSpeed: UsbSpeed) -> None:
        ...
    
    @overload
    def __init__(self, nameOrDeviceId: str) -> None:
        ...
    
    @overload
    def __init__(self, nameOrDeviceId: str, maxUsbSpeed: UsbSpeed) -> None:
        ...
    
    @overload
    def getInputQueue(self, name: str) -> DataInputQueue:
        ...
    
    @overload
    def getInputQueue(self, name: str, maxSize: int, blocking: bool = ...) -> DataInputQueue:
        ...
    
    def getInputQueueNames(self) -> List[str]:
        ...
    
    @overload
    def getOutputQueue(self, name: str) -> DataOutputQueue:
        ...
    
    @overload
    def getOutputQueue(self, name: str, maxSize: int, blocking: bool = ...) -> DataOutputQueue:
        ...
    
    def getOutputQueueNames(self) -> List[str]:
        ...
    
    @overload
    def getQueueEvent(self, queueNames: List[str], timeout: datetime.timedelta = ...) -> str:
        ...
    
    @overload
    def getQueueEvent(self, queueName: str, timeout: datetime.timedelta = ...) -> str:
        ...
    
    @overload
    def getQueueEvent(self, timeout: datetime.timedelta = ...) -> str:
        ...
    
    @overload
    def getQueueEvents(self, queueNames: List[str], maxNumEvents: int = ..., timeout: datetime.timedelta = ...) -> List[str]:
        ...
    
    @overload
    def getQueueEvents(self, queueName: str, maxNumEvents: int = ..., timeout: datetime.timedelta = ...) -> List[str]:
        ...
    
    @overload
    def getQueueEvents(self, maxNumEvents: int = ..., timeout: datetime.timedelta = ...) -> List[str]:
        ...
    


class DeviceBase:
    @overload
    def __init__(self, pipeline: Pipeline) -> None:
        ...
    
    @overload
    def __init__(self, pipeline: Pipeline, usb2Mode: bool) -> None:
        ...
    
    @overload
    def __init__(self, pipeline: Pipeline, maxUsbSpeed: UsbSpeed) -> None:
        ...
    
    @overload
    def __init__(self, pipeline: Pipeline, pathToCmd: Path) -> None:
        ...
    
    @overload
    def __init__(self, pipeline: Pipeline, devInfo: DeviceInfo, usb2Mode: bool = ...) -> None:
        ...
    
    @overload
    def __init__(self, pipeline: Pipeline, deviceInfo: DeviceInfo, maxUsbSpeed: UsbSpeed) -> None:
        ...
    
    @overload
    def __init__(self, pipeline: Pipeline, devInfo: DeviceInfo, pathToCmd: Path) -> None:
        ...
    
    @overload
    def __init__(self, version: OpenVINO.Version = ...) -> None:
        ...
    
    @overload
    def __init__(self, version: OpenVINO.Version, usb2Mode: bool = ...) -> None:
        ...
    
    @overload
    def __init__(self, version: OpenVINO.Version, maxUsbSpeed: UsbSpeed) -> None:
        ...
    
    @overload
    def __init__(self, version: OpenVINO.Version, pathToCmd: Path) -> None:
        ...
    
    @overload
    def __init__(self, version: OpenVINO.Version, deviceInfo: DeviceInfo, usb2Mode: bool = ...) -> None:
        ...
    
    @overload
    def __init__(self, version: OpenVINO.Version, deviceInfo: DeviceInfo, maxUsbSpeed: UsbSpeed) -> None:
        ...
    
    @overload
    def __init__(self, version: OpenVINO.Version, deviceDesc: DeviceInfo, pathToCmd: Path) -> None:
        ...
    
    @overload
    def __init__(self, config: Device.Config) -> None:
        ...
    
    @overload
    def __init__(self, config: Device.Config, deviceInfo: DeviceInfo) -> None:
        ...
    
    @overload
    def __init__(self, deviceInfo: DeviceInfo) -> None:
        ...
    
    @overload
    def __init__(self, deviceInfo: DeviceInfo, maxUsbSpeed: UsbSpeed) -> None:
        ...
    
    @overload
    def __init__(self, nameOrDeviceId: str) -> None:
        ...
    
    @overload
    def __init__(self, nameOrDeviceId: str, maxUsbSpeed: UsbSpeed) -> None:
        ...
    
    def addLogCallback(self, callback: Callable[[LogMessage], None]) -> int:
        ...
    
    def close(self) -> None:
        ...
    
    def factoryResetCalibration(self) -> None:
        ...
    
    def flashCalibration(self, calibrationDataHandler: CalibrationHandler) -> bool:
        ...
    
    def flashCalibration2(self, arg0: CalibrationHandler) -> None:
        ...
    
    def flashEepromClear(self) -> None:
        ...
    
    def flashFactoryCalibration(self, arg0: CalibrationHandler) -> None:
        ...
    
    def flashFactoryEepromClear(self) -> None:
        ...
    
    @classmethod
    def getAllAvailableDevices(cls) -> List[DeviceInfo]:
        ...
    
    @classmethod
    def getAllConnectedDevices(cls) -> List[DeviceInfo]:
        ...
    
    @overload
    @classmethod
    def getAnyAvailableDevice(cls, timeout: datetime.timedelta) -> Tuple[bool, DeviceInfo]:
        ...
    
    @overload
    @classmethod
    def getAnyAvailableDevice(cls) -> Tuple[bool, DeviceInfo]:
        ...
    
    def getBootloaderVersion(self) -> Optional[Version]:
        ...
    
    def getCameraSensorNames(self) -> Dict[CameraBoardSocket, str]:
        ...
    
    def getChipTemperature(self) -> ChipTemperature:
        ...
    
    def getCmxMemoryUsage(self) -> MemoryInfo:
        ...
    
    def getConnectedCameraFeatures(self) -> List[CameraFeatures]:
        ...
    
    def getConnectedCameras(self) -> List[CameraBoardSocket]:
        ...
    
    def getConnectedIMU(self) -> str:
        ...
    
    def getCrashDump(self, clearCrashDump: bool = ...) -> CrashDump:
        ...
    
    def getDdrMemoryUsage(self) -> MemoryInfo:
        ...
    
    @classmethod
    def getDeviceByMxId(cls, mxId: str) -> Tuple[bool, DeviceInfo]:
        ...
    
    def getDeviceInfo(self) -> DeviceInfo:
        ...
    
    def getDeviceName(self) -> object:
        ...
    
    @overload
    @classmethod
    def getEmbeddedDeviceBinary(cls, usb2Mode: bool, version: OpenVINO.Version = ...) -> List[int]:
        ...
    
    @overload
    @classmethod
    def getEmbeddedDeviceBinary(cls, config: Device.Config) -> List[int]:
        ...
    
    def getEmbeddedIMUFirmwareVersion(self) -> Version:
        ...
    
    @classmethod
    def getFirstAvailableDevice(cls, skipInvalidDevices: bool = ...) -> Tuple[bool, DeviceInfo]:
        ...
    
    @classmethod
    def getGlobalProfilingData(cls) -> ProfilingData:
        ...
    
    def getIMUFirmwareUpdateStatus(self) -> Tuple[bool, float]:
        ...
    
    def getIMUFirmwareVersion(self) -> Version:
        ...
    
    def getIrDrivers(self) -> List[Tuple[str, int, int]]:
        ...
    
    def getLeonCssCpuUsage(self) -> CpuUsage:
        ...
    
    def getLeonCssHeapUsage(self) -> MemoryInfo:
        ...
    
    def getLeonMssCpuUsage(self) -> CpuUsage:
        ...
    
    def getLeonMssHeapUsage(self) -> MemoryInfo:
        ...
    
    def getLogLevel(self) -> LogLevel:
        ...
    
    def getLogOutputLevel(self) -> LogLevel:
        ...
    
    def getMxId(self) -> str:
        ...
    
    def getProfilingData(self) -> ProfilingData:
        ...
    
    def getSystemInformationLoggingRate(self) -> float:
        ...
    
    def getUsbSpeed(self) -> UsbSpeed:
        ...
    
    def getXLinkChunkSize(self) -> int:
        ...
    
    def hasCrashDump(self) -> bool:
        ...
    
    def isClosed(self) -> bool:
        ...
    
    def isEepromAvailable(self) -> bool:
        ...
    
    def isPipelineRunning(self) -> bool:
        ...
    
    def readCalibration(self) -> CalibrationHandler:
        ...
    
    def readCalibration2(self) -> CalibrationHandler:
        ...
    
    def readCalibrationOrDefault(self) -> CalibrationHandler:
        ...
    
    def readCalibrationRaw(self) -> List[int]:
        ...
    
    def readFactoryCalibration(self) -> CalibrationHandler:
        ...
    
    def readFactoryCalibrationOrDefault(self) -> CalibrationHandler:
        ...
    
    def readFactoryCalibrationRaw(self) -> List[int]:
        ...
    
    def removeLogCallback(self, callbackId: int) -> bool:
        ...
    
    def setIrFloodLightBrightness(self, mA: float, mask: int = ...) -> bool:
        ...
    
    def setIrLaserDotProjectorBrightness(self, mA: float, mask: int = ...) -> bool:
        ...
    
    def setLogLevel(self, level: LogLevel) -> None:
        ...
    
    def setLogOutputLevel(self, level: LogLevel) -> None:
        ...
    
    def setSystemInformationLoggingRate(self, rateHz: float) -> None:
        ...
    
    @overload
    def setTimesync(self, arg0: datetime.timedelta, arg1: int, arg2: bool) -> None:
        ...
    
    @overload
    def setTimesync(self, enable: bool) -> None:
        ...
    
    def setXLinkChunkSize(self, sizeBytes: int) -> None:
        ...
    
    def startIMUFirmwareUpdate(self, forceUpdate: bool = ...) -> bool:
        ...
    
    @overload
    def startPipeline(self) -> None:
        ...
    
    @overload
    def startPipeline(self, arg0: Pipeline) -> bool:
        ...
    
    def __enter__(self) -> DeviceBase:
        ...
    
    def __exit__(self, arg0: object, arg1: object, arg2: object) -> None:
        ...
    


class DeviceBootloader:
    class ApplicationInfo:
        applicationName: str
        firmwareVersion: str
        hasApplication: bool
        def __init__(self) -> None:
            ...
        
    
    
    class Config:
        appMem: DeviceBootloader.Memory
        network: DeviceBootloader.NetworkConfig
        usb: DeviceBootloader.UsbConfig
        def __init__(self) -> None:
            ...
        
        def fromJson(self) -> DeviceBootloader.Config:
            ...
        
        def getDnsAltIPv4(self) -> str:
            ...
        
        def getDnsIPv4(self) -> str:
            ...
        
        def getIPv4(self) -> str:
            ...
        
        def getIPv4Gateway(self) -> str:
            ...
        
        def getIPv4Mask(self) -> str:
            ...
        
        def getMacAddress(self) -> str:
            ...
        
        def getNetworkTimeout(self) -> datetime.timedelta:
            ...
        
        def getUsbMaxSpeed(self) -> UsbSpeed:
            ...
        
        def getUsbTimeout(self) -> datetime.timedelta:
            ...
        
        def isStaticIPV4(self) -> bool:
            ...
        
        def setDnsIPv4(self, arg0: str, arg1: str) -> None:
            ...
        
        def setDynamicIPv4(self, arg0: str, arg1: str, arg2: str) -> None:
            ...
        
        def setMacAddress(self, arg0: str) -> None:
            ...
        
        def setNetworkTimeout(self, arg0: datetime.timedelta) -> None:
            ...
        
        def setStaticIPv4(self, arg0: str, arg1: str, arg2: str) -> None:
            ...
        
        def setUsbMaxSpeed(self, arg0: UsbSpeed) -> None:
            ...
        
        def setUsbTimeout(self, arg0: datetime.timedelta) -> None:
            ...
        
        def toJson(self) -> json:
            ...
        
    
    
    class Memory:
        __members__: ClassVar[dict] = ...
        AUTO: ClassVar[DeviceBootloader.Memory] = ...
        EMMC: ClassVar[DeviceBootloader.Memory] = ...
        FLASH: ClassVar[DeviceBootloader.Memory] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class MemoryInfo:
        available: bool
        info: str
        size: int
        def __init__(self) -> None:
            ...
        
    
    
    class NetworkConfig:
        ipv4: int
        ipv4Dns: int
        ipv4DnsAlt: int
        ipv4Gateway: int
        ipv4Mask: int
        ipv6: List[int[4]]
        ipv6Dns: List[int[4]]
        ipv6DnsAlt: List[int[4]]
        ipv6Gateway: List[int[4]]
        ipv6Prefix: int
        mac: List[int[6]]
        staticIpv4: bool
        staticIpv6: bool
        timeoutMs: int
        def __init__(self) -> None:
            ...
        
    
    
    class Section:
        __members__: ClassVar[dict] = ...
        APPLICATION: ClassVar[DeviceBootloader.Section] = ...
        AUTO: ClassVar[DeviceBootloader.Section] = ...
        BOOTLOADER: ClassVar[DeviceBootloader.Section] = ...
        BOOTLOADER_CONFIG: ClassVar[DeviceBootloader.Section] = ...
        HEADER: ClassVar[DeviceBootloader.Section] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class Type:
        __members__: ClassVar[dict] = ...
        AUTO: ClassVar[DeviceBootloader.Type] = ...
        NETWORK: ClassVar[DeviceBootloader.Type] = ...
        USB: ClassVar[DeviceBootloader.Type] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class UsbConfig:
        maxUsbSpeed: int
        pid: int
        timeoutMs: int
        vid: int
        def __init__(self) -> None:
            ...
        
    
    
    @overload
    def __init__(self, devInfo: DeviceInfo, allowFlashingBootloader: bool = ...) -> None:
        ...
    
    @overload
    def __init__(self, devInfo: DeviceInfo, pathToCmd: Path, allowFlashingBootloader: bool = ...) -> None:
        ...
    
    @overload
    def __init__(self, nameOrDeviceId: str, allowFlashingBootloader: bool = ...) -> None:
        ...
    
    def bootMemory(self, fw: List[int]) -> None:
        ...
    
    def bootUsbRomBootloader(self) -> None:
        ...
    
    def close(self) -> None:
        ...
    
    @overload
    @classmethod
    def createDepthaiApplicationPackage(cls, pipeline: Pipeline, pathToCmd: Path = ..., compress: bool = ..., applicationName: str = ..., checkChecksum: bool = ...) -> List[int]:
        ...
    
    @overload
    @classmethod
    def createDepthaiApplicationPackage(cls, pipeline: Pipeline, compress: bool, applicationName: str = ..., checkChecksum: bool = ...) -> List[int]:
        ...
    
    @overload
    def flash(self, progressCallback: Callable[[float], None], pipeline: Pipeline, compress: bool = ..., applicationName: str = ..., memory: DeviceBootloader.Memory = ..., checkChecksum: bool = ...) -> Tuple[bool, str]:
        ...
    
    @overload
    def flash(self, pipeline: Pipeline, compress: bool = ..., applicationName: str = ..., memory: DeviceBootloader.Memory = ..., checkChecksum: bool = ...) -> Tuple[bool, str]:
        ...
    
    def flashBootHeader(self, memory: DeviceBootloader.Memory, frequency: int = ..., location: int = ..., dummyCycles: int = ..., offset: int = ...) -> Tuple[bool, str]:
        ...
    
    @overload
    def flashBootloader(self, progressCallback: Callable[[float], None], path: Path = ...) -> Tuple[bool, str]:
        ...
    
    @overload
    def flashBootloader(self, memory: DeviceBootloader.Memory, type: DeviceBootloader.Type, progressCallback: Callable[[float], None], path: Path = ...) -> Tuple[bool, str]:
        ...
    
    def flashClear(self, memory: DeviceBootloader.Memory = ...) -> Tuple[bool, str]:
        ...
    
    def flashConfig(self, config: DeviceBootloader.Config, memory: DeviceBootloader.Memory = ..., type: DeviceBootloader.Type = ...) -> Tuple[bool, str]:
        ...
    
    def flashConfigClear(self, memory: DeviceBootloader.Memory = ..., type: DeviceBootloader.Type = ...) -> Tuple[bool, str]:
        ...
    
    def flashConfigData(self, configData: json, memory: DeviceBootloader.Memory = ..., type: DeviceBootloader.Type = ...) -> Tuple[bool, str]:
        ...
    
    def flashConfigFile(self, configData: Path, memory: DeviceBootloader.Memory = ..., type: DeviceBootloader.Type = ...) -> Tuple[bool, str]:
        ...
    
    @overload
    def flashCustom(self, memory: DeviceBootloader.Memory, offset: int, data: List[int], progressCallback: Callable[[float], None] = ...) -> Tuple[bool, str]:
        ...
    
    @overload
    def flashCustom(self, memory: DeviceBootloader.Memory, offset: int, filename: str, progressCallback: Callable[[float], None] = ...) -> Tuple[bool, str]:
        ...
    
    @overload
    def flashDepthaiApplicationPackage(self, progressCallback: Callable[[float], None], package: List[int], memory: DeviceBootloader.Memory = ...) -> Tuple[bool, str]:
        ...
    
    @overload
    def flashDepthaiApplicationPackage(self, package: List[int], memory: DeviceBootloader.Memory = ...) -> Tuple[bool, str]:
        ...
    
    def flashFastBootHeader(self, memory: DeviceBootloader.Memory, frequency: int = ..., location: int = ..., dummyCycles: int = ..., offset: int = ...) -> Tuple[bool, str]:
        ...
    
    def flashGpioModeBootHeader(self, memory: DeviceBootloader.Memory, mode: int) -> Tuple[bool, str]:
        ...
    
    def flashUsbRecoveryBootHeader(self, memory: DeviceBootloader.Memory) -> Tuple[bool, str]:
        ...
    
    def flashUserBootloader(self, progressCallback: Callable[[float], None], path: Path = ...) -> Tuple[bool, str]:
        ...
    
    @classmethod
    def getAllAvailableDevices(cls) -> List[DeviceInfo]:
        ...
    
    @classmethod
    def getEmbeddedBootloaderBinary(cls, arg0: DeviceBootloader.Type) -> List[int]:
        ...
    
    @classmethod
    def getEmbeddedBootloaderVersion(cls) -> Version:
        ...
    
    @classmethod
    def getFirstAvailableDevice(cls) -> Tuple[bool, DeviceInfo]:
        ...
    
    def getMemoryInfo(self, arg0: DeviceBootloader.Memory) -> DeviceBootloader.MemoryInfo:
        ...
    
    def getType(self) -> DeviceBootloader.Type:
        ...
    
    def getVersion(self) -> Version:
        ...
    
    def isAllowedFlashingBootloader(self) -> bool:
        ...
    
    def isEmbeddedVersion(self) -> bool:
        ...
    
    def isUserBootloader(self) -> bool:
        ...
    
    def isUserBootloaderSupported(self) -> bool:
        ...
    
    def readApplicationInfo(self, memory: DeviceBootloader.Memory) -> DeviceBootloader.ApplicationInfo:
        ...
    
    def readConfig(self, memory: DeviceBootloader.Memory = ..., type: DeviceBootloader.Type = ...) -> DeviceBootloader.Config:
        ...
    
    def readConfigData(self, memory: DeviceBootloader.Memory = ..., type: DeviceBootloader.Type = ...) -> json:
        ...
    
    @overload
    def readCustom(self, memory: DeviceBootloader.Memory, offset: int, size: int, filename: str, progressCallback: Callable[[float], None] = ...) -> Tuple[bool, str]:
        ...
    
    @overload
    def readCustom(self, memory: DeviceBootloader.Memory, offset: int, size: int, progressCallback: Callable[[float], None] = ...) -> Tuple[bool, str, List[int]]:
        ...
    
    @overload
    @classmethod
    def saveDepthaiApplicationPackage(cls, path: Path, pipeline: Pipeline, pathToCmd: Path = ..., compress: bool = ..., applicationName: str = ..., checkChecksum: bool = ...) -> None:
        ...
    
    @overload
    @classmethod
    def saveDepthaiApplicationPackage(cls, path: Path, pipeline: Pipeline, compress: bool, applicationName: str = ..., checkChecksum: bool = ...) -> None:
        ...
    
    def __enter__(self) -> DeviceBootloader:
        ...
    
    def __exit__(self, arg0: object, arg1: object, arg2: object) -> None:
        ...
    


class DeviceDesc:
    mxid: str
    name: str
    platform: XLinkPlatform
    protocol: XLinkProtocol
    state: XLinkDeviceState
    status: XLinkError_t
    def __init__(self) -> None:
        ...
    


class DeviceInfo:
    desc: object
    mxid: str
    name: str
    platform: XLinkPlatform
    protocol: XLinkProtocol
    state: XLinkDeviceState
    status: XLinkError_t
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, name: str, mxid: str, state: XLinkDeviceState, protocol: XLinkProtocol, platform: XLinkPlatform, status: XLinkError_t) -> None:
        ...
    
    @overload
    def __init__(self, mxidOrName: str) -> None:
        ...
    
    @overload
    def __init__(self, arg0: DeviceDesc) -> None:
        ...
    
    def getMxId(self) -> str:
        ...
    
    def getXLinkDeviceDesc(self) -> DeviceDesc:
        ...
    


class EdgeDetectorConfig(Buffer):
    def __init__(self) -> None:
        ...
    
    def get(self) -> RawEdgeDetectorConfig:
        ...
    
    def getConfigData(self) -> EdgeDetectorConfigData:
        ...
    
    def set(self, config: RawEdgeDetectorConfig) -> EdgeDetectorConfig:
        ...
    
    def setSobelFilterKernels(self, horizontalKernel: List[List[int]], verticalKernel: List[List[int]]) -> None:
        ...
    


class EdgeDetectorConfigData:
    sobelFilterHorizontalKernel: List[List[int]]
    sobelFilterVerticalKernel: List[List[int]]
    def __init__(self) -> None:
        ...
    


class EdgeDetectorProperties:
    initialConfig: RawEdgeDetectorConfig
    numFramesPool: int
    outputFrameSize: int
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EepromData:
    batchName: str
    batchTime: int
    boardConf: str
    boardCustom: str
    boardName: str
    boardOptions: int
    boardRev: str
    cameraData: Dict[CameraBoardSocket, CameraInfo]
    hardwareConf: str
    imuExtrinsics: Extrinsics
    miscellaneousData: List[int]
    productName: str
    stereoRectificationData: StereoRectification
    version: int
    def __init__(self) -> None:
        ...
    


class EepromError(RuntimeError):
    ...


class Extrinsics:
    rotationMatrix: List[List[float]]
    specTranslation: Point3f
    toCameraSocket: CameraBoardSocket
    translation: Point3f
    def __init__(self) -> None:
        ...
    


class FeatureTrackerConfig(Buffer):
    class CornerDetector:
        class Thresholds:
            decreaseFactor: float
            increaseFactor: float
            initialValue: float
            max: float
            min: float
            def __init__(self) -> None:
                ...
            
        
        
        class Type:
            __members__: ClassVar[dict] = ...
            HARRIS: ClassVar[RawFeatureTrackerConfig.CornerDetector.Type] = ...
            SHI_THOMASI: ClassVar[RawFeatureTrackerConfig.CornerDetector.Type] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        cellGridDimension: int
        enableSobel: bool
        enableSorting: bool
        numMaxFeatures: int
        numTargetFeatures: int
        thresholds: RawFeatureTrackerConfig.CornerDetector.Thresholds
        type: RawFeatureTrackerConfig.CornerDetector.Type
        def __init__(self) -> None:
            ...
        
    
    
    class FeatureMaintainer:
        enable: bool
        lostFeatureErrorThreshold: float
        minimumDistanceBetweenFeatures: float
        trackedFeatureThreshold: float
        def __init__(self) -> None:
            ...
        
    
    
    class MotionEstimator:
        class OpticalFlow:
            epsilon: float
            maxIterations: int
            pyramidLevels: int
            searchWindowHeight: int
            searchWindowWidth: int
            def __init__(self) -> None:
                ...
            
        
        
        class Type:
            __members__: ClassVar[dict] = ...
            HW_MOTION_ESTIMATION: ClassVar[RawFeatureTrackerConfig.MotionEstimator.Type] = ...
            LUCAS_KANADE_OPTICAL_FLOW: ClassVar[RawFeatureTrackerConfig.MotionEstimator.Type] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        enable: bool
        opticalFlow: RawFeatureTrackerConfig.MotionEstimator.OpticalFlow
        type: RawFeatureTrackerConfig.MotionEstimator.Type
        def __init__(self) -> None:
            ...
        
    
    
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, arg0: RawFeatureTrackerConfig) -> None:
        ...
    
    def get(self) -> RawFeatureTrackerConfig:
        ...
    
    def set(self, config: RawFeatureTrackerConfig) -> FeatureTrackerConfig:
        ...
    
    @overload
    def setCornerDetector(self, cornerDetector: RawFeatureTrackerConfig.CornerDetector.Type) -> FeatureTrackerConfig:
        ...
    
    @overload
    def setCornerDetector(self, config: RawFeatureTrackerConfig.CornerDetector) -> FeatureTrackerConfig:
        ...
    
    @overload
    def setFeatureMaintainer(self, enable: bool) -> FeatureTrackerConfig:
        ...
    
    @overload
    def setFeatureMaintainer(self, config: RawFeatureTrackerConfig.FeatureMaintainer) -> FeatureTrackerConfig:
        ...
    
    def setHwMotionEstimation(self) -> FeatureTrackerConfig:
        ...
    
    @overload
    def setMotionEstimator(self, enable: bool) -> FeatureTrackerConfig:
        ...
    
    @overload
    def setMotionEstimator(self, config: RawFeatureTrackerConfig.MotionEstimator) -> FeatureTrackerConfig:
        ...
    
    def setNumTargetFeatures(self, numTargetFeatures: int) -> FeatureTrackerConfig:
        ...
    
    @overload
    def setOpticalFlow(self) -> FeatureTrackerConfig:
        ...
    
    @overload
    def setOpticalFlow(self, config: RawFeatureTrackerConfig.MotionEstimator.OpticalFlow) -> FeatureTrackerConfig:
        ...
    


class FeatureTrackerProperties:
    initialConfig: RawFeatureTrackerConfig
    numMemorySlices: int
    numShaves: int
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FrameEvent:
    __members__: ClassVar[dict] = ...
    NONE: ClassVar[FrameEvent] = ...
    READOUT_END: ClassVar[FrameEvent] = ...
    READOUT_START: ClassVar[FrameEvent] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class GlobalProperties:
    cameraTuningBlobSize: Optional[int]
    cameraTuningBlobUri: str
    leonOsFrequencyHz: float
    leonRtFrequencyHz: float
    pipelineName: Optional[str]
    pipelineVersion: Optional[str]
    sippBufferSize: int
    sippDmaBufferSize: int
    xlinkChunkSize: int
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class IMUData(Buffer):
    packets: List[IMUPacket]
    def __init__(self) -> None:
        ...
    


class IMUPacket:
    acceleroMeter: IMUReportAccelerometer
    gyroscope: IMUReportGyroscope
    magneticField: IMUReportMagneticField
    rotationVector: IMUReportRotationVectorWAcc
    def __init__(self) -> None:
        ...
    


class IMUProperties:
    batchReportThreshold: int
    enableFirmwareUpdate: Optional[bool]
    imuSensors: List[IMUSensorConfig]
    maxBatchReports: int
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class IMUReport:
    class Accuracy:
        __members__: ClassVar[dict] = ...
        HIGH: ClassVar[IMUReport.Accuracy] = ...
        LOW: ClassVar[IMUReport.Accuracy] = ...
        MEDIUM: ClassVar[IMUReport.Accuracy] = ...
        UNRELIABLE: ClassVar[IMUReport.Accuracy] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    accuracy: IMUReport.Accuracy
    sequence: int
    timestamp: Timestamp
    tsDevice: Timestamp
    def __init__(self) -> None:
        ...
    
    def getSequenceNum(self) -> int:
        ...
    
    def getTimestamp(self) -> datetime.timedelta:
        ...
    
    def getTimestampDevice(self) -> datetime.timedelta:
        ...
    


class IMUReportAccelerometer(IMUReport):
    x: float
    y: float
    z: float
    def __init__(self) -> None:
        ...
    


class IMUReportGyroscope(IMUReport):
    x: float
    y: float
    z: float
    def __init__(self) -> None:
        ...
    


class IMUReportMagneticField(IMUReport):
    x: float
    y: float
    z: float
    def __init__(self) -> None:
        ...
    


class IMUReportRotationVectorWAcc(IMUReport):
    i: float
    j: float
    k: float
    real: float
    rotationVectorAccuracy: float
    def __init__(self) -> None:
        ...
    


class IMUSensor:
    __members__: ClassVar[dict] = ...
    ACCELEROMETER: ClassVar[IMUSensor] = ...
    ACCELEROMETER_RAW: ClassVar[IMUSensor] = ...
    ARVR_STABILIZED_GAME_ROTATION_VECTOR: ClassVar[IMUSensor] = ...
    ARVR_STABILIZED_ROTATION_VECTOR: ClassVar[IMUSensor] = ...
    GAME_ROTATION_VECTOR: ClassVar[IMUSensor] = ...
    GEOMAGNETIC_ROTATION_VECTOR: ClassVar[IMUSensor] = ...
    GRAVITY: ClassVar[IMUSensor] = ...
    GYROSCOPE_CALIBRATED: ClassVar[IMUSensor] = ...
    GYROSCOPE_RAW: ClassVar[IMUSensor] = ...
    GYROSCOPE_UNCALIBRATED: ClassVar[IMUSensor] = ...
    LINEAR_ACCELERATION: ClassVar[IMUSensor] = ...
    MAGNETOMETER_CALIBRATED: ClassVar[IMUSensor] = ...
    MAGNETOMETER_RAW: ClassVar[IMUSensor] = ...
    MAGNETOMETER_UNCALIBRATED: ClassVar[IMUSensor] = ...
    ROTATION_VECTOR: ClassVar[IMUSensor] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class IMUSensorConfig:
    changeSensitivity: int
    reportRate: int
    sensitivityEnabled: bool
    sensitivityRelative: bool
    sensorId: IMUSensor
    def __init__(self) -> None:
        ...
    


class ImageManipConfig(Buffer):
    def __init__(self) -> None:
        ...
    
    def get(self) -> RawImageManipConfig:
        ...
    
    def getColormap(self) -> Colormap:
        ...
    
    def getCropConfig(self) -> RawImageManipConfig.CropConfig:
        ...
    
    def getCropXMax(self) -> float:
        ...
    
    def getCropXMin(self) -> float:
        ...
    
    def getCropYMax(self) -> float:
        ...
    
    def getCropYMin(self) -> float:
        ...
    
    def getFormatConfig(self) -> RawImageManipConfig.FormatConfig:
        ...
    
    def getResizeConfig(self) -> RawImageManipConfig.ResizeConfig:
        ...
    
    def getResizeHeight(self) -> int:
        ...
    
    def getResizeWidth(self) -> int:
        ...
    
    def isResizeThumbnail(self) -> bool:
        ...
    
    def set(self, config: RawImageManipConfig) -> ImageManipConfig:
        ...
    
    def setCenterCrop(self, ratio: float, whRatio: float = ...) -> ImageManipConfig:
        ...
    
    @overload
    def setColormap(self, colormap: Colormap, min: int, max: int) -> ImageManipConfig:
        ...
    
    @overload
    def setColormap(self, colormap: Colormap, max: int = ...) -> ImageManipConfig:
        ...
    
    @overload
    def setColormap(self, colormap: Colormap, max: float = ...) -> ImageManipConfig:
        ...
    
    @overload
    def setCropRect(self, xmin: float, ymin: float, xmax: float, ymax: float) -> ImageManipConfig:
        ...
    
    @overload
    def setCropRect(self, coordinates: Tuple[float, float, float, float]) -> ImageManipConfig:
        ...
    
    def setCropRotatedRect(self, rr: RotatedRect, normalizedCoords: bool = ...) -> ImageManipConfig:
        ...
    
    def setFrameType(self, type: RawImgFrame.Type) -> ImageManipConfig:
        ...
    
    def setHorizontalFlip(self, flip: bool) -> ImageManipConfig:
        ...
    
    def setKeepAspectRatio(self, keep: bool) -> ImageManipConfig:
        ...
    
    @overload
    def setResize(self, w: int, h: int) -> ImageManipConfig:
        ...
    
    @overload
    def setResize(self, size: Tuple[int, int]) -> ImageManipConfig:
        ...
    
    @overload
    def setResizeThumbnail(self, w: int, h: int, bgRed: int = ..., bgGreen: int = ..., bgBlue: int = ...) -> ImageManipConfig:
        ...
    
    @overload
    def setResizeThumbnail(self, size: Tuple[int, int], bgRed: int = ..., bgGreen: int = ..., bgBlue: int = ...) -> ImageManipConfig:
        ...
    
    def setReusePreviousImage(self, reuse: bool) -> ImageManipConfig:
        ...
    
    def setRotationDegrees(self, deg: float) -> ImageManipConfig:
        ...
    
    def setRotationRadians(self, rad: float) -> ImageManipConfig:
        ...
    
    def setSkipCurrentImage(self, skip: bool) -> ImageManipConfig:
        ...
    
    def setVerticalFlip(self, flip: bool) -> None:
        ...
    
    def setWarpBorderFillColor(self, red: int, green: int, blue: int) -> ImageManipConfig:
        ...
    
    def setWarpBorderReplicatePixels(self) -> ImageManipConfig:
        ...
    
    def setWarpTransformFourPoints(self, pt: List[Point2f], normalizedCoords: bool) -> ImageManipConfig:
        ...
    
    def setWarpTransformMatrix3x3(self, mat: List[float]) -> ImageManipConfig:
        ...
    


class ImgDetection:
    confidence: float
    label: int
    xmax: float
    xmin: float
    ymax: float
    ymin: float
    def __init__(self) -> None:
        ...
    


class ImgDetections(Buffer):
    detections: List[ImgDetection]
    def __init__(self) -> None:
        ...
    
    def getSequenceNum(self) -> int:
        ...
    
    def getTimestamp(self) -> datetime.timedelta:
        ...
    
    def getTimestampDevice(self) -> datetime.timedelta:
        ...
    
    def setSequenceNum(self, arg0: int) -> ImgDetections:
        ...
    
    def setTimestamp(self, arg0: datetime.timedelta) -> ImgDetections:
        ...
    
    def setTimestampDevice(self, arg0: datetime.timedelta) -> ImgDetections:
        ...
    


class ImgFrame(Buffer):
    class Specs:
        bytesPP: int
        height: int
        p1Offset: int
        p2Offset: int
        p3Offset: int
        stride: int
        type: RawImgFrame.Type
        width: int
        def __init__(self) -> None:
            ...
        
    
    
    class Type:
        __members__: ClassVar[dict] = ...
        BGR888i: ClassVar[RawImgFrame.Type] = ...
        BGR888p: ClassVar[RawImgFrame.Type] = ...
        BGRF16F16F16i: ClassVar[RawImgFrame.Type] = ...
        BGRF16F16F16p: ClassVar[RawImgFrame.Type] = ...
        BITSTREAM: ClassVar[RawImgFrame.Type] = ...
        GRAY8: ClassVar[RawImgFrame.Type] = ...
        GRAYF16: ClassVar[RawImgFrame.Type] = ...
        HDR: ClassVar[RawImgFrame.Type] = ...
        LUT16: ClassVar[RawImgFrame.Type] = ...
        LUT2: ClassVar[RawImgFrame.Type] = ...
        LUT4: ClassVar[RawImgFrame.Type] = ...
        NONE: ClassVar[RawImgFrame.Type] = ...
        NV12: ClassVar[RawImgFrame.Type] = ...
        NV21: ClassVar[RawImgFrame.Type] = ...
        PACK10: ClassVar[RawImgFrame.Type] = ...
        PACK12: ClassVar[RawImgFrame.Type] = ...
        RAW10: ClassVar[RawImgFrame.Type] = ...
        RAW12: ClassVar[RawImgFrame.Type] = ...
        RAW14: ClassVar[RawImgFrame.Type] = ...
        RAW16: ClassVar[RawImgFrame.Type] = ...
        RAW8: ClassVar[RawImgFrame.Type] = ...
        RGB161616: ClassVar[RawImgFrame.Type] = ...
        RGB888i: ClassVar[RawImgFrame.Type] = ...
        RGB888p: ClassVar[RawImgFrame.Type] = ...
        RGBA8888: ClassVar[RawImgFrame.Type] = ...
        RGBF16F16F16i: ClassVar[RawImgFrame.Type] = ...
        RGBF16F16F16p: ClassVar[RawImgFrame.Type] = ...
        YUV400p: ClassVar[RawImgFrame.Type] = ...
        YUV420p: ClassVar[RawImgFrame.Type] = ...
        YUV422i: ClassVar[RawImgFrame.Type] = ...
        YUV422p: ClassVar[RawImgFrame.Type] = ...
        YUV444i: ClassVar[RawImgFrame.Type] = ...
        YUV444p: ClassVar[RawImgFrame.Type] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    def __init__(self) -> None:
        ...
    
    def getCategory(self) -> int:
        ...
    
    def getColorTemperature(self) -> int:
        ...
    
    def getCvFrame(self) -> object:
        ...
    
    def getExposureTime(self) -> datetime.timedelta:
        ...
    
    def getFrame(self, copy: bool = ...) -> numpy.ndarray:
        ...
    
    def getHeight(self) -> int:
        ...
    
    def getInstanceNum(self) -> int:
        ...
    
    def getLensPosition(self) -> int:
        ...
    
    def getSensitivity(self) -> int:
        ...
    
    def getSequenceNum(self) -> int:
        ...
    
    @overload
    def getTimestamp(self) -> datetime.timedelta:
        ...
    
    @overload
    def getTimestamp(self, offset: CameraExposureOffset) -> datetime.timedelta:
        ...
    
    @overload
    def getTimestampDevice(self) -> datetime.timedelta:
        ...
    
    @overload
    def getTimestampDevice(self, offset: CameraExposureOffset) -> datetime.timedelta:
        ...
    
    def getType(self) -> RawImgFrame.Type:
        ...
    
    def getWidth(self) -> int:
        ...
    
    def setCategory(self, category: int) -> ImgFrame:
        ...
    
    def setFrame(self, array: numpy.ndarray) -> None:
        ...
    
    def setHeight(self, height: int) -> ImgFrame:
        ...
    
    def setInstanceNum(self, instance: int) -> ImgFrame:
        ...
    
    def setSequenceNum(self, seq: int) -> ImgFrame:
        ...
    
    @overload
    def setSize(self, width: int, height: int) -> ImgFrame:
        ...
    
    @overload
    def setSize(self, sizer: Tuple[int, int]) -> ImgFrame:
        ...
    
    def setTimestamp(self, timestamp: datetime.timedelta) -> ImgFrame:
        ...
    
    def setTimestampDevice(self, arg0: datetime.timedelta) -> ImgFrame:
        ...
    
    def setType(self, type: RawImgFrame.Type) -> ImgFrame:
        ...
    
    def setWidth(self, width: int) -> ImgFrame:
        ...
    


class LogLevel:
    __members__: ClassVar[dict] = ...
    CRITICAL: ClassVar[LogLevel] = ...
    DEBUG: ClassVar[LogLevel] = ...
    ERR: ClassVar[LogLevel] = ...
    INFO: ClassVar[LogLevel] = ...
    OFF: ClassVar[LogLevel] = ...
    TRACE: ClassVar[LogLevel] = ...
    WARN: ClassVar[LogLevel] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class LogMessage:
    colorRangeEnd: int
    colorRangeStart: int
    level: LogLevel
    nodeIdName: str
    payload: str
    time: Timestamp
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MedianFilter:
    __members__: ClassVar[dict] = ...
    KERNEL_3x3: ClassVar[MedianFilter] = ...
    KERNEL_5x5: ClassVar[MedianFilter] = ...
    KERNEL_7x7: ClassVar[MedianFilter] = ...
    MEDIAN_OFF: ClassVar[MedianFilter] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class MemoryInfo:
    remaining: int
    total: int
    used: int
    def __init__(self) -> None:
        ...
    


class MonoCameraProperties:
    class SensorResolution:
        __members__: ClassVar[dict] = ...
        THE_1200_P: ClassVar[MonoCameraProperties.SensorResolution] = ...
        THE_400_P: ClassVar[MonoCameraProperties.SensorResolution] = ...
        THE_480_P: ClassVar[MonoCameraProperties.SensorResolution] = ...
        THE_720_P: ClassVar[MonoCameraProperties.SensorResolution] = ...
        THE_800_P: ClassVar[MonoCameraProperties.SensorResolution] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    boardSocket: CameraBoardSocket
    eventFilter: List[FrameEvent]
    fps: float
    initialControl: RawCameraControl
    isp3aFps: int
    numFramesPool: int
    numFramesPoolRaw: int
    resolution: MonoCameraProperties.SensorResolution
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NNData(Buffer):
    def __init__(self) -> None:
        ...
    
    def getAllLayerNames(self) -> List[str]:
        ...
    
    def getAllLayers(self) -> List[TensorInfo]:
        ...
    
    def getFirstLayerFp16(self) -> List[float]:
        ...
    
    def getFirstLayerInt32(self) -> List[int]:
        ...
    
    def getFirstLayerUInt8(self) -> List[int]:
        ...
    
    def getLayer(self, name: str, tensor: TensorInfo) -> bool:
        ...
    
    def getLayerDatatype(self, name: str, datatype: TensorInfo.DataType) -> bool:
        ...
    
    def getLayerFp16(self, name: str) -> List[float]:
        ...
    
    def getLayerInt32(self, name: str) -> List[int]:
        ...
    
    def getLayerUInt8(self, name: str) -> List[int]:
        ...
    
    def getSequenceNum(self) -> int:
        ...
    
    def getTimestamp(self) -> datetime.timedelta:
        ...
    
    def getTimestampDevice(self) -> datetime.timedelta:
        ...
    
    def hasLayer(self, name: str) -> bool:
        ...
    
    @overload
    def setLayer(self, name: str, data: numpy.ndarray[numpy.uint8]) -> None:
        ...
    
    @overload
    def setLayer(self, name: str, data: List[int]) -> NNData:
        ...
    
    @overload
    def setLayer(self, name: str, data: List[float]) -> NNData:
        ...
    
    @overload
    def setLayer(self, name: str, data: List[float]) -> NNData:
        ...
    
    def setSequenceNum(self, arg0: int) -> NNData:
        ...
    
    def setTimestamp(self, arg0: datetime.timedelta) -> NNData:
        ...
    
    def setTimestampDevice(self, arg0: datetime.timedelta) -> NNData:
        ...
    


class NeuralNetworkProperties:
    blobSize: Optional[int]
    blobUri: str
    numFrames: int
    numNCEPerThread: int
    numThreads: int
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Node:
    class Connection:
        inputGroup: str
        inputId: int
        inputName: str
        outputGroup: str
        outputId: int
        outputName: str
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    class DatatypeHierarchy:
        datatype: DatatypeEnum
        descendants: bool
        def __init__(self, arg0: DatatypeEnum, arg1: bool) -> None:
            ...
        
    
    
    class Id:
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    class Input:
        class Type:
            __members__: ClassVar[dict] = ...
            MReceiver: ClassVar[Node.Input.Type] = ...
            SReceiver: ClassVar[Node.Input.Type] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        group: str
        name: str
        possibleDatatypes: List[Node.DatatypeHierarchy]
        type: Node.Input.Type
        waitForMessage: Optional[bool]
        def __init__(self, *args, **kwargs) -> None:
            ...
        
        def getBlocking(self) -> bool:
            ...
        
        @overload
        def getParent(self) -> Node:
            ...
        
        @overload
        def getParent(self) -> Node:
            ...
        
        def getQueueSize(self) -> int:
            ...
        
        def getReusePreviousMessage(self) -> bool:
            ...
        
        def getWaitForMessage(self) -> bool:
            ...
        
        def setBlocking(self, blocking: bool) -> None:
            ...
        
        def setQueueSize(self, size: int) -> None:
            ...
        
        def setReusePreviousMessage(self, reusePreviousMessage: bool) -> None:
            ...
        
        def setWaitForMessage(self, waitForMessage: bool) -> None:
            ...
        
    
    
    class InputMap:
        def __init__(self, *args, **kwargs) -> None:
            ...
        
        def items(self) -> Iterator:
            ...
        
        def __bool__(self) -> bool:
            ...
        
        def __contains__(self, arg0: str) -> bool:
            ...
        
        def __delitem__(self, arg0: str) -> None:
            ...
        
        def __getitem__(self, arg0: str) -> Node.Input:
            ...
        
        def __iter__(self) -> Iterator:
            ...
        
        def __len__(self) -> int:
            ...
        
        def __setitem__(self, arg0: str, arg1: Node.Input) -> None:
            ...
        
    
    
    class Output:
        class Type:
            __members__: ClassVar[dict] = ...
            MSender: ClassVar[Node.Output.Type] = ...
            SSender: ClassVar[Node.Output.Type] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        group: str
        name: str
        possibleDatatypes: List[Node.DatatypeHierarchy]
        type: Node.Output.Type
        def __init__(self, *args, **kwargs) -> None:
            ...
        
        def canConnect(self, input: Node.Input) -> bool:
            ...
        
        def getConnections(self) -> List[Node.Connection]:
            ...
        
        @overload
        def getParent(self) -> Node:
            ...
        
        @overload
        def getParent(self) -> Node:
            ...
        
        def isSamePipeline(self, input: Node.Input) -> bool:
            ...
        
        def link(self, input: Node.Input) -> None:
            ...
        
        def unlink(self, input: Node.Input) -> None:
            ...
        
    
    
    class OutputMap:
        def __init__(self, *args, **kwargs) -> None:
            ...
        
        def items(self) -> Iterator:
            ...
        
        def __bool__(self) -> bool:
            ...
        
        def __contains__(self, arg0: str) -> bool:
            ...
        
        def __delitem__(self, arg0: str) -> None:
            ...
        
        def __getitem__(self, arg0: str) -> Node.Output:
            ...
        
        def __iter__(self) -> Iterator:
            ...
        
        def __len__(self) -> int:
            ...
        
        def __setitem__(self, arg0: str, arg1: Node.Output) -> None:
            ...
        
    
    
    properties: Properties
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @overload
    def getAssetManager(self) -> AssetManager:
        ...
    
    @overload
    def getAssetManager(self) -> AssetManager:
        ...
    
    @overload
    def getInputRefs(self) -> List[Node.Input]:
        ...
    
    @overload
    def getInputRefs(self) -> List[Node.Input]:
        ...
    
    def getInputs(self) -> List[Node.Input]:
        ...
    
    def getName(self) -> str:
        ...
    
    @overload
    def getOutputRefs(self) -> List[Node.Output]:
        ...
    
    @overload
    def getOutputRefs(self) -> List[Node.Output]:
        ...
    
    def getOutputs(self) -> List[Node.Output]:
        ...
    
    @overload
    def getParentPipeline(self) -> Pipeline:
        ...
    
    @overload
    def getParentPipeline(self) -> Pipeline:
        ...
    
    @property
    def id(self) -> int:
        ...
    


class ObjectTrackerProperties:
    detectionLabelsToTrack: List[int]
    maxObjectsToTrack: int
    trackerIdAssignmentPolicy: TrackerIdAssignmentPolicy
    trackerThreshold: float
    trackerType: TrackerType
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OpenVINO:
    class Blob:
        data: List[int]
        networkInputs: Dict[str, TensorInfo]
        networkOutputs: Dict[str, TensorInfo]
        numShaves: int
        numSlices: int
        stageCount: int
        version: OpenVINO.Version
        @overload
        def __init__(self, arg0: List[int]) -> None:
            ...
        
        @overload
        def __init__(self, arg0: Path) -> None:
            ...
        
    
    
    class Version:
        __members__: ClassVar[dict] = ...
        VERSION_2020_3: ClassVar[OpenVINO.Version] = ...
        VERSION_2020_4: ClassVar[OpenVINO.Version] = ...
        VERSION_2021_1: ClassVar[OpenVINO.Version] = ...
        VERSION_2021_2: ClassVar[OpenVINO.Version] = ...
        VERSION_2021_3: ClassVar[OpenVINO.Version] = ...
        VERSION_2021_4: ClassVar[OpenVINO.Version] = ...
        VERSION_2022_1: ClassVar[OpenVINO.Version] = ...
        VERSION_UNIVERSAL: ClassVar[OpenVINO.Version] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    DEFAULT_VERSION: ClassVar[OpenVINO.Version] = ...
    VERSION_2020_3: ClassVar[OpenVINO.Version] = ...
    VERSION_2020_4: ClassVar[OpenVINO.Version] = ...
    VERSION_2021_1: ClassVar[OpenVINO.Version] = ...
    VERSION_2021_2: ClassVar[OpenVINO.Version] = ...
    VERSION_2021_3: ClassVar[OpenVINO.Version] = ...
    VERSION_2021_4: ClassVar[OpenVINO.Version] = ...
    VERSION_2022_1: ClassVar[OpenVINO.Version] = ...
    VERSION_UNIVERSAL: ClassVar[OpenVINO.Version] = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @classmethod
    def areVersionsBlobCompatible(cls, v1: OpenVINO.Version, v2: OpenVINO.Version) -> bool:
        ...
    
    @classmethod
    def getBlobLatestSupportedVersion(cls, *args, **kwargs) -> Any:
        ...
    
    @classmethod
    def getBlobSupportedVersions(cls, *args, **kwargs) -> Any:
        ...
    
    @classmethod
    def getVersionName(cls, version: OpenVINO.Version) -> str:
        ...
    
    @classmethod
    def getVersions(cls) -> List[OpenVINO.Version]:
        ...
    
    @classmethod
    def parseVersionName(cls, versionString: str) -> OpenVINO.Version:
        ...
    


class Pipeline:
    def __init__(self) -> None:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.AprilTag]) -> node.AprilTag:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.ColorCamera]) -> node.ColorCamera:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.DetectionParser]) -> node.DetectionParser:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.EdgeDetector]) -> node.EdgeDetector:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.FeatureTracker]) -> node.FeatureTracker:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.IMU]) -> node.IMU:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.ImageManip]) -> node.ImageManip:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.MobileNetDetectionNetwork]) -> node.MobileNetDetectionNetwork:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.MobileNetSpatialDetectionNetwork]) -> node.MobileNetSpatialDetectionNetwork:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.MonoCamera]) -> node.MonoCamera:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.NeuralNetwork]) -> node.NeuralNetwork:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.ObjectTracker]) -> node.ObjectTracker:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.SPIIn]) -> node.SPIIn:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.SPIOut]) -> node.SPIOut:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.Script]) -> node.Script:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.SpatialLocationCalculator]) -> node.SpatialLocationCalculator:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.StereoDepth]) -> node.StereoDepth:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.SystemLogger]) -> node.SystemLogger:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.UVC]) -> node.UVC:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.VideoEncoder]) -> node.VideoEncoder:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.XLinkIn]) -> node.XLinkIn:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.XLinkOut]) -> node.XLinkOut:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.YoloDetectionNetwork]) -> node.YoloDetectionNetwork:
        ...
    
    @overload
    def create(self, arg0: typing.Type[node.YoloSpatialDetectionNetwork]) -> node.YoloSpatialDetectionNetwork:
        ...
    
    def createAprilTag(self) -> node.AprilTag:
        ...
    
    def createColorCamera(self) -> node.ColorCamera:
        ...
    
    def createDetectionParser(self) -> node.DetectionParser:
        ...
    
    def createEdgeDetector(self) -> node.EdgeDetector:
        ...
    
    def createFeatureTracker(self) -> node.FeatureTracker:
        ...
    
    def createIMU(self) -> node.IMU:
        ...
    
    def createImageManip(self) -> node.ImageManip:
        ...
    
    def createMobileNetDetectionNetwork(self) -> node.MobileNetDetectionNetwork:
        ...
    
    def createMobileNetSpatialDetectionNetwork(self) -> node.MobileNetSpatialDetectionNetwork:
        ...
    
    def createMonoCamera(self) -> node.MonoCamera:
        ...
    
    def createNeuralNetwork(self) -> node.NeuralNetwork:
        ...
    
    def createObjectTracker(self) -> node.ObjectTracker:
        ...
    
    def createSPIIn(self) -> node.SPIIn:
        ...
    
    def createSPIOut(self) -> node.SPIOut:
        ...
    
    def createScript(self) -> node.Script:
        ...
    
    def createSpatialLocationCalculator(self) -> node.SpatialLocationCalculator:
        ...
    
    def createStereoDepth(self) -> node.StereoDepth:
        ...
    
    def createSystemLogger(self) -> node.SystemLogger:
        ...
    
    def createUVC(self) -> node.UVC:
        ...
    
    def createVideoEncoder(self) -> node.VideoEncoder:
        ...
    
    def createXLinkIn(self) -> node.XLinkIn:
        ...
    
    def createXLinkOut(self) -> node.XLinkOut:
        ...
    
    def createYoloDetectionNetwork(self) -> node.YoloDetectionNetwork:
        ...
    
    def createYoloSpatialDetectionNetwork(self) -> node.YoloSpatialDetectionNetwork:
        ...
    
    @overload
    def getAllNodes(self) -> List[Node]:
        ...
    
    @overload
    def getAllNodes(self) -> List[Node]:
        ...
    
    @overload
    def getAssetManager(self) -> AssetManager:
        ...
    
    @overload
    def getAssetManager(self) -> AssetManager:
        ...
    
    def getBoardConfig(self) -> BoardConfig:
        ...
    
    def getCalibrationData(self) -> CalibrationHandler:
        ...
    
    def getConnectionMap(self) -> Dict[int, Set[Node.Connection]]:
        ...
    
    def getConnections(self) -> List[Node.Connection]:
        ...
    
    def getDeviceConfig(self) -> Device.Config:
        ...
    
    def getGlobalProperties(self) -> GlobalProperties:
        ...
    
    @overload
    def getNode(self, arg0: int) -> Node:
        ...
    
    @overload
    def getNode(self, arg0: int) -> Node:
        ...
    
    def getNodeMap(self) -> Dict[int, Node]:
        ...
    
    def getOpenVINOVersion(self) -> OpenVINO.Version:
        ...
    
    def getRequiredOpenVINOVersion(self) -> Optional[OpenVINO.Version]:
        ...
    
    def link(self, arg0: Node.Output, arg1: Node.Input) -> None:
        ...
    
    def remove(self, node: Node) -> None:
        ...
    
    def serializeToJson(self) -> json:
        ...
    
    def setBoardConfig(self, arg0: BoardConfig) -> None:
        ...
    
    def setCalibrationData(self, calibrationDataHandler: CalibrationHandler) -> None:
        ...
    
    def setCameraTuningBlobPath(self, path: Path) -> None:
        ...
    
    def setOpenVINOVersion(self, version: OpenVINO.Version) -> None:
        ...
    
    def setSippBufferSize(self, sizeBytes: int) -> None:
        ...
    
    def setSippDmaBufferSize(self, sizeBytes: int) -> None:
        ...
    
    def setXLinkChunkSize(self, sizeBytes: int) -> None:
        ...
    
    def unlink(self, arg0: Node.Output, arg1: Node.Input) -> None:
        ...
    


class Point2f:
    x: float
    y: float
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, arg0: float, arg1: float) -> None:
        ...
    


class Point3f:
    x: float
    y: float
    z: float
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float) -> None:
        ...
    


class ProcessorType:
    __members__: ClassVar[dict] = ...
    LEON_CSS: ClassVar[ProcessorType] = ...
    LEON_MSS: ClassVar[ProcessorType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class ProfilingData:
    numBytesRead: int
    numBytesWritten: int
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Properties:
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RawAprilTagConfig(RawBuffer):
    class Family:
        __members__: ClassVar[dict] = ...
        TAG_16H5: ClassVar[RawAprilTagConfig.Family] = ...
        TAG_25H9: ClassVar[RawAprilTagConfig.Family] = ...
        TAG_36H10: ClassVar[RawAprilTagConfig.Family] = ...
        TAG_36H11: ClassVar[RawAprilTagConfig.Family] = ...
        TAG_CIR21H7: ClassVar[RawAprilTagConfig.Family] = ...
        TAG_STAND41H12: ClassVar[RawAprilTagConfig.Family] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class QuadThresholds:
        criticalDegree: float
        deglitch: bool
        maxLineFitMse: float
        maxNmaxima: int
        minClusterPixels: int
        minWhiteBlackDiff: int
        def __init__(self) -> None:
            ...
        
    
    
    decodeSharpening: float
    family: RawAprilTagConfig.Family
    maxHammingDistance: int
    quadDecimate: int
    quadSigma: float
    quadThresholds: RawAprilTagConfig.QuadThresholds
    refineEdges: bool
    def __init__(self) -> None:
        ...
    


class RawBuffer:
    data: numpy.ndarray[numpy.uint8]
    def __init__(self) -> None:
        ...
    


class RawCameraControl(RawBuffer):
    class AntiBandingMode:
        __members__: ClassVar[dict] = ...
        AUTO: ClassVar[RawCameraControl.AntiBandingMode] = ...
        MAINS_50_HZ: ClassVar[RawCameraControl.AntiBandingMode] = ...
        MAINS_60_HZ: ClassVar[RawCameraControl.AntiBandingMode] = ...
        OFF: ClassVar[RawCameraControl.AntiBandingMode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class AutoFocusMode:
        __members__: ClassVar[dict] = ...
        AUTO: ClassVar[RawCameraControl.AutoFocusMode] = ...
        CONTINUOUS_PICTURE: ClassVar[RawCameraControl.AutoFocusMode] = ...
        CONTINUOUS_VIDEO: ClassVar[RawCameraControl.AutoFocusMode] = ...
        EDOF: ClassVar[RawCameraControl.AutoFocusMode] = ...
        MACRO: ClassVar[RawCameraControl.AutoFocusMode] = ...
        OFF: ClassVar[RawCameraControl.AutoFocusMode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class AutoWhiteBalanceMode:
        __members__: ClassVar[dict] = ...
        AUTO: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        CLOUDY_DAYLIGHT: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        DAYLIGHT: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        FLUORESCENT: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        INCANDESCENT: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        OFF: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        SHADE: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        TWILIGHT: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        WARM_FLUORESCENT: ClassVar[RawCameraControl.AutoWhiteBalanceMode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class Command:
        __members__: ClassVar[dict] = ...
        AE_AUTO: ClassVar[RawCameraControl.Command] = ...
        AE_LOCK: ClassVar[RawCameraControl.Command] = ...
        AE_MANUAL: ClassVar[RawCameraControl.Command] = ...
        AE_REGION: ClassVar[RawCameraControl.Command] = ...
        AE_TARGET_FPS_RANGE: ClassVar[RawCameraControl.Command] = ...
        AF_MODE: ClassVar[RawCameraControl.Command] = ...
        AF_REGION: ClassVar[RawCameraControl.Command] = ...
        AF_TRIGGER: ClassVar[RawCameraControl.Command] = ...
        ANTIBANDING_MODE: ClassVar[RawCameraControl.Command] = ...
        AWB_LOCK: ClassVar[RawCameraControl.Command] = ...
        AWB_MODE: ClassVar[RawCameraControl.Command] = ...
        BRIGHTNESS: ClassVar[RawCameraControl.Command] = ...
        CAPTURE_INTENT: ClassVar[RawCameraControl.Command] = ...
        CHROMA_DENOISE: ClassVar[RawCameraControl.Command] = ...
        CONTRAST: ClassVar[RawCameraControl.Command] = ...
        CONTROL_MODE: ClassVar[RawCameraControl.Command] = ...
        CUSTOM_CAPTURE: ClassVar[RawCameraControl.Command] = ...
        CUSTOM_CAPT_MODE: ClassVar[RawCameraControl.Command] = ...
        CUSTOM_EXP_BRACKETS: ClassVar[RawCameraControl.Command] = ...
        CUSTOM_USECASE: ClassVar[RawCameraControl.Command] = ...
        EFFECT_MODE: ClassVar[RawCameraControl.Command] = ...
        EXPOSURE_COMPENSATION: ClassVar[RawCameraControl.Command] = ...
        FRAME_DURATION: ClassVar[RawCameraControl.Command] = ...
        LUMA_DENOISE: ClassVar[RawCameraControl.Command] = ...
        MOVE_LENS: ClassVar[RawCameraControl.Command] = ...
        NOISE_REDUCTION_STRENGTH: ClassVar[RawCameraControl.Command] = ...
        RESOLUTION: ClassVar[RawCameraControl.Command] = ...
        SATURATION: ClassVar[RawCameraControl.Command] = ...
        SCENE_MODE: ClassVar[RawCameraControl.Command] = ...
        SENSITIVITY: ClassVar[RawCameraControl.Command] = ...
        SHARPNESS: ClassVar[RawCameraControl.Command] = ...
        START_STREAM: ClassVar[RawCameraControl.Command] = ...
        STILL_CAPTURE: ClassVar[RawCameraControl.Command] = ...
        STOP_STREAM: ClassVar[RawCameraControl.Command] = ...
        STREAM_FORMAT: ClassVar[RawCameraControl.Command] = ...
        WB_COLOR_TEMP: ClassVar[RawCameraControl.Command] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class EffectMode:
        __members__: ClassVar[dict] = ...
        AQUA: ClassVar[RawCameraControl.EffectMode] = ...
        BLACKBOARD: ClassVar[RawCameraControl.EffectMode] = ...
        MONO: ClassVar[RawCameraControl.EffectMode] = ...
        NEGATIVE: ClassVar[RawCameraControl.EffectMode] = ...
        OFF: ClassVar[RawCameraControl.EffectMode] = ...
        POSTERIZE: ClassVar[RawCameraControl.EffectMode] = ...
        SEPIA: ClassVar[RawCameraControl.EffectMode] = ...
        SOLARIZE: ClassVar[RawCameraControl.EffectMode] = ...
        WHITEBOARD: ClassVar[RawCameraControl.EffectMode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class FrameSyncMode:
        __members__: ClassVar[dict] = ...
        INPUT: ClassVar[RawCameraControl.FrameSyncMode] = ...
        OFF: ClassVar[RawCameraControl.FrameSyncMode] = ...
        OUTPUT: ClassVar[RawCameraControl.FrameSyncMode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class SceneMode:
        __members__: ClassVar[dict] = ...
        ACTION: ClassVar[RawCameraControl.SceneMode] = ...
        BARCODE: ClassVar[RawCameraControl.SceneMode] = ...
        BEACH: ClassVar[RawCameraControl.SceneMode] = ...
        CANDLELIGHT: ClassVar[RawCameraControl.SceneMode] = ...
        FACE_PRIORITY: ClassVar[RawCameraControl.SceneMode] = ...
        FIREWORKS: ClassVar[RawCameraControl.SceneMode] = ...
        LANDSCAPE: ClassVar[RawCameraControl.SceneMode] = ...
        NIGHT: ClassVar[RawCameraControl.SceneMode] = ...
        NIGHT_PORTRAIT: ClassVar[RawCameraControl.SceneMode] = ...
        PARTY: ClassVar[RawCameraControl.SceneMode] = ...
        PORTRAIT: ClassVar[RawCameraControl.SceneMode] = ...
        SNOW: ClassVar[RawCameraControl.SceneMode] = ...
        SPORTS: ClassVar[RawCameraControl.SceneMode] = ...
        STEADYPHOTO: ClassVar[RawCameraControl.SceneMode] = ...
        SUNSET: ClassVar[RawCameraControl.SceneMode] = ...
        THEATRE: ClassVar[RawCameraControl.SceneMode] = ...
        UNSUPPORTED: ClassVar[RawCameraControl.SceneMode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    aeLockMode: bool
    afRegion: Any
    antiBandingMode: RawCameraControl.AntiBandingMode
    autoFocusMode: RawCameraControl.AutoFocusMode
    awbLockMode: bool
    awbMode: RawCameraControl.AutoWhiteBalanceMode
    brightness: int
    chromaDenoise: int
    cmdMask: int
    contrast: int
    effectMode: RawCameraControl.EffectMode
    expCompensation: int
    expManual: Any
    lensPosition: int
    lumaDenoise: int
    saturation: int
    sceneMode: RawCameraControl.SceneMode
    sharpness: int
    wbColorTemp: int
    def __init__(self) -> None:
        ...
    
    def clearCommand(self, arg0: RawCameraControl.Command) -> None:
        ...
    
    def getCommand(self, arg0: RawCameraControl.Command) -> bool:
        ...
    
    def setCommand(self, arg0: RawCameraControl.Command, arg1: bool) -> None:
        ...
    


class RawEdgeDetectorConfig(RawBuffer):
    config: EdgeDetectorConfigData
    def __init__(self) -> None:
        ...
    


class RawFeatureTrackerConfig(RawBuffer):
    class CornerDetector:
        class Thresholds:
            decreaseFactor: float
            increaseFactor: float
            initialValue: float
            max: float
            min: float
            def __init__(self) -> None:
                ...
            
        
        
        class Type:
            __members__: ClassVar[dict] = ...
            HARRIS: ClassVar[RawFeatureTrackerConfig.CornerDetector.Type] = ...
            SHI_THOMASI: ClassVar[RawFeatureTrackerConfig.CornerDetector.Type] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        cellGridDimension: int
        enableSobel: bool
        enableSorting: bool
        numMaxFeatures: int
        numTargetFeatures: int
        thresholds: RawFeatureTrackerConfig.CornerDetector.Thresholds
        type: RawFeatureTrackerConfig.CornerDetector.Type
        def __init__(self) -> None:
            ...
        
    
    
    class FeatureMaintainer:
        enable: bool
        lostFeatureErrorThreshold: float
        minimumDistanceBetweenFeatures: float
        trackedFeatureThreshold: float
        def __init__(self) -> None:
            ...
        
    
    
    class MotionEstimator:
        class OpticalFlow:
            epsilon: float
            maxIterations: int
            pyramidLevels: int
            searchWindowHeight: int
            searchWindowWidth: int
            def __init__(self) -> None:
                ...
            
        
        
        class Type:
            __members__: ClassVar[dict] = ...
            HW_MOTION_ESTIMATION: ClassVar[RawFeatureTrackerConfig.MotionEstimator.Type] = ...
            LUCAS_KANADE_OPTICAL_FLOW: ClassVar[RawFeatureTrackerConfig.MotionEstimator.Type] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        enable: bool
        opticalFlow: RawFeatureTrackerConfig.MotionEstimator.OpticalFlow
        type: RawFeatureTrackerConfig.MotionEstimator.Type
        def __init__(self) -> None:
            ...
        
    
    
    cornerDetector: RawFeatureTrackerConfig.CornerDetector
    featureMaintainer: RawFeatureTrackerConfig.FeatureMaintainer
    motionEstimator: RawFeatureTrackerConfig.MotionEstimator
    def __init__(self) -> None:
        ...
    


class RawIMUData(RawBuffer):
    packets: List[IMUPacket]
    def __init__(self) -> None:
        ...
    


class RawImageManipConfig(RawBuffer):
    class CropConfig:
        cropRatio: float
        cropRect: RawImageManipConfig.CropRect
        cropRotatedRect: RotatedRect
        enableCenterCropRectangle: bool
        enableRotatedRect: bool
        normalizedCoords: bool
        widthHeightAspectRatio: float
        def __init__(self) -> None:
            ...
        
    
    
    class CropRect:
        xmax: float
        xmin: float
        ymax: float
        ymin: float
        def __init__(self) -> None:
            ...
        
    
    
    class FormatConfig:
        flipHorizontal: bool
        flipVertical: bool
        type: RawImgFrame.Type
        def __init__(self) -> None:
            ...
        
    
    
    class ResizeConfig:
        bgBlue: str
        bgGreen: str
        bgRed: str
        enableRotation: bool
        enableWarp4pt: bool
        enableWarpMatrix: bool
        height: int
        keepAspectRatio: bool
        lockAspectRatioFill: bool
        normalizedCoords: bool
        rotationAngleDeg: float
        warpBorderReplicate: bool
        warpFourPoints: List[Point2f]
        warpMatrix3x3: List[float]
        width: int
        def __init__(self) -> None:
            ...
        
    
    
    cropConfig: RawImageManipConfig.CropConfig
    enableCrop: bool
    enableFormat: bool
    enableResize: bool
    formatConfig: RawImageManipConfig.FormatConfig
    resizeConfig: RawImageManipConfig.ResizeConfig
    def __init__(self) -> None:
        ...
    


class RawImgDetections(RawBuffer):
    detections: List[ImgDetection]
    sequenceNum: int
    ts: float
    tsDevice: float
    def __init__(self) -> None:
        ...
    


class RawImgFrame(RawBuffer):
    class Specs:
        bytesPP: int
        height: int
        p1Offset: int
        p2Offset: int
        p3Offset: int
        stride: int
        type: RawImgFrame.Type
        width: int
        def __init__(self) -> None:
            ...
        
    
    
    class Type:
        __members__: ClassVar[dict] = ...
        BGR888i: ClassVar[RawImgFrame.Type] = ...
        BGR888p: ClassVar[RawImgFrame.Type] = ...
        BGRF16F16F16i: ClassVar[RawImgFrame.Type] = ...
        BGRF16F16F16p: ClassVar[RawImgFrame.Type] = ...
        BITSTREAM: ClassVar[RawImgFrame.Type] = ...
        GRAY8: ClassVar[RawImgFrame.Type] = ...
        GRAYF16: ClassVar[RawImgFrame.Type] = ...
        HDR: ClassVar[RawImgFrame.Type] = ...
        LUT16: ClassVar[RawImgFrame.Type] = ...
        LUT2: ClassVar[RawImgFrame.Type] = ...
        LUT4: ClassVar[RawImgFrame.Type] = ...
        NONE: ClassVar[RawImgFrame.Type] = ...
        NV12: ClassVar[RawImgFrame.Type] = ...
        NV21: ClassVar[RawImgFrame.Type] = ...
        PACK10: ClassVar[RawImgFrame.Type] = ...
        PACK12: ClassVar[RawImgFrame.Type] = ...
        RAW10: ClassVar[RawImgFrame.Type] = ...
        RAW12: ClassVar[RawImgFrame.Type] = ...
        RAW14: ClassVar[RawImgFrame.Type] = ...
        RAW16: ClassVar[RawImgFrame.Type] = ...
        RAW8: ClassVar[RawImgFrame.Type] = ...
        RGB161616: ClassVar[RawImgFrame.Type] = ...
        RGB888i: ClassVar[RawImgFrame.Type] = ...
        RGB888p: ClassVar[RawImgFrame.Type] = ...
        RGBA8888: ClassVar[RawImgFrame.Type] = ...
        RGBF16F16F16i: ClassVar[RawImgFrame.Type] = ...
        RGBF16F16F16p: ClassVar[RawImgFrame.Type] = ...
        YUV400p: ClassVar[RawImgFrame.Type] = ...
        YUV420p: ClassVar[RawImgFrame.Type] = ...
        YUV422i: ClassVar[RawImgFrame.Type] = ...
        YUV422p: ClassVar[RawImgFrame.Type] = ...
        YUV444i: ClassVar[RawImgFrame.Type] = ...
        YUV444p: ClassVar[RawImgFrame.Type] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    category: int
    fb: RawImgFrame.Specs
    instanceNum: int
    sequenceNum: int
    ts: float
    tsDevice: float
    def __init__(self) -> None:
        ...
    


class RawNNData(RawBuffer):
    batchSize: int
    sequenceNum: int
    tensors: List[TensorInfo]
    ts: float
    tsDevice: float
    def __init__(self) -> None:
        ...
    


class RawSpatialImgDetections(RawBuffer):
    detections: List[SpatialImgDetection]
    sequenceNum: int
    ts: float
    tsDevice: float
    def __init__(self) -> None:
        ...
    


class RawStereoDepthConfig(RawBuffer):
    class AlgorithmControl:
        class DepthAlign:
            __members__: ClassVar[dict] = ...
            CENTER: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthAlign] = ...
            RECTIFIED_LEFT: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthAlign] = ...
            RECTIFIED_RIGHT: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthAlign] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        class DepthUnit:
            __members__: ClassVar[dict] = ...
            CENTIMETER: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthUnit] = ...
            CUSTOM: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthUnit] = ...
            FOOT: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthUnit] = ...
            INCH: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthUnit] = ...
            METER: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthUnit] = ...
            MILLIMETER: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthUnit] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        centerAlignmentShiftFactor: Optional[float]
        customDepthUnitMultiplier: float
        depthAlign: RawStereoDepthConfig.AlgorithmControl.DepthAlign
        depthUnit: RawStereoDepthConfig.AlgorithmControl.DepthUnit
        disparityShift: int
        enableExtended: bool
        enableLeftRightCheck: bool
        enableSubpixel: bool
        leftRightCheckThreshold: int
        numInvalidateEdgePixels: int
        subpixelFractionalBits: int
        def __init__(self) -> None:
            ...
        
    
    
    class CensusTransform:
        class KernelSize:
            __members__: ClassVar[dict] = ...
            AUTO: ClassVar[RawStereoDepthConfig.CensusTransform.KernelSize] = ...
            KERNEL_5x5: ClassVar[RawStereoDepthConfig.CensusTransform.KernelSize] = ...
            KERNEL_7x7: ClassVar[RawStereoDepthConfig.CensusTransform.KernelSize] = ...
            KERNEL_7x9: ClassVar[RawStereoDepthConfig.CensusTransform.KernelSize] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        enableMeanMode: bool
        kernelMask: int
        kernelSize: RawStereoDepthConfig.CensusTransform.KernelSize
        threshold: int
        def __init__(self) -> None:
            ...
        
    
    
    class CostAggregation:
        divisionFactor: int
        horizontalPenaltyCostP1: int
        horizontalPenaltyCostP2: int
        verticalPenaltyCostP1: int
        verticalPenaltyCostP2: int
        def __init__(self) -> None:
            ...
        
    
    
    class CostMatching:
        class DisparityWidth:
            __members__: ClassVar[dict] = ...
            DISPARITY_64: ClassVar[RawStereoDepthConfig.CostMatching.DisparityWidth] = ...
            DISPARITY_96: ClassVar[RawStereoDepthConfig.CostMatching.DisparityWidth] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        class LinearEquationParameters:
            alpha: int
            beta: int
            threshold: int
            def __init__(self) -> None:
                ...
            
        
        
        confidenceThreshold: int
        disparityWidth: RawStereoDepthConfig.CostMatching.DisparityWidth
        enableCompanding: bool
        invalidDisparityValue: int
        linearEquationParameters: RawStereoDepthConfig.CostMatching.LinearEquationParameters
        def __init__(self) -> None:
            ...
        
    
    
    class MedianFilter:
        __members__: ClassVar[dict] = ...
        KERNEL_3x3: ClassVar[MedianFilter] = ...
        KERNEL_5x5: ClassVar[MedianFilter] = ...
        KERNEL_7x7: ClassVar[MedianFilter] = ...
        MEDIAN_OFF: ClassVar[MedianFilter] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class PostProcessing:
        class BrightnessFilter:
            maxBrightness: int
            minBrightness: int
            def __init__(self) -> None:
                ...
            
        
        
        class DecimationFilter:
            class DecimationMode:
                __members__: ClassVar[dict] = ...
                NON_ZERO_MEAN: ClassVar[RawStereoDepthConfig.PostProcessing.DecimationFilter.DecimationMode] = ...
                NON_ZERO_MEDIAN: ClassVar[RawStereoDepthConfig.PostProcessing.DecimationFilter.DecimationMode] = ...
                PIXEL_SKIPPING: ClassVar[RawStereoDepthConfig.PostProcessing.DecimationFilter.DecimationMode] = ...
                __entries: ClassVar[dict] = ...
                def __init__(self, value: int) -> None:
                    ...
                
                def __eq__(self, other: object) -> bool:
                    ...
                
                def __getstate__(self) -> int:
                    ...
                
                def __hash__(self) -> int:
                    ...
                
                def __index__(self) -> int:
                    ...
                
                def __int__(self) -> int:
                    ...
                
                def __ne__(self, other: object) -> bool:
                    ...
                
                def __setstate__(self, state: int) -> None:
                    ...
                
                @property
                def name(self) -> str:
                    ...
                
                @property
                def value(self) -> int:
                    ...
                
            
            
            decimationFactor: int
            decimationMode: RawStereoDepthConfig.PostProcessing.DecimationFilter.DecimationMode
            def __init__(self) -> None:
                ...
            
        
        
        class SpatialFilter:
            alpha: float
            delta: int
            enable: bool
            holeFillingRadius: int
            numIterations: int
            def __init__(self) -> None:
                ...
            
        
        
        class SpeckleFilter:
            enable: bool
            speckleRange: int
            def __init__(self) -> None:
                ...
            
        
        
        class TemporalFilter:
            class PersistencyMode:
                __members__: ClassVar[dict] = ...
                PERSISTENCY_INDEFINITELY: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                PERSISTENCY_OFF: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                VALID_1_IN_LAST_2: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                VALID_1_IN_LAST_5: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                VALID_1_IN_LAST_8: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                VALID_2_IN_LAST_3: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                VALID_2_IN_LAST_4: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                VALID_2_OUT_OF_8: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                VALID_8_OUT_OF_8: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                __entries: ClassVar[dict] = ...
                def __init__(self, value: int) -> None:
                    ...
                
                def __eq__(self, other: object) -> bool:
                    ...
                
                def __getstate__(self) -> int:
                    ...
                
                def __hash__(self) -> int:
                    ...
                
                def __index__(self) -> int:
                    ...
                
                def __int__(self) -> int:
                    ...
                
                def __ne__(self, other: object) -> bool:
                    ...
                
                def __setstate__(self, state: int) -> None:
                    ...
                
                @property
                def name(self) -> str:
                    ...
                
                @property
                def value(self) -> int:
                    ...
                
            
            
            alpha: float
            delta: int
            enable: bool
            persistencyMode: RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode
            def __init__(self) -> None:
                ...
            
        
        
        class ThresholdFilter:
            maxRange: int
            minRange: int
            def __init__(self) -> None:
                ...
            
        
        
        bilateralSigmaValue: int
        brightnessFilter: RawStereoDepthConfig.PostProcessing.BrightnessFilter
        decimationFilter: RawStereoDepthConfig.PostProcessing.DecimationFilter
        median: MedianFilter
        spatialFilter: RawStereoDepthConfig.PostProcessing.SpatialFilter
        speckleFilter: RawStereoDepthConfig.PostProcessing.SpeckleFilter
        temporalFilter: RawStereoDepthConfig.PostProcessing.TemporalFilter
        thresholdFilter: RawStereoDepthConfig.PostProcessing.ThresholdFilter
        def __init__(self) -> None:
            ...
        
    
    
    algorithmControl: RawStereoDepthConfig.AlgorithmControl
    censusTransform: RawStereoDepthConfig.CensusTransform
    costAggregation: RawStereoDepthConfig.CostAggregation
    costMatching: RawStereoDepthConfig.CostMatching
    postProcessing: RawStereoDepthConfig.PostProcessing
    def __init__(self) -> None:
        ...
    


class RawSystemInformation(RawBuffer):
    chipTemperature: ChipTemperature
    cmxMemoryUsage: MemoryInfo
    ddrMemoryUsage: MemoryInfo
    leonCssCpuUsage: CpuUsage
    leonCssMemoryUsage: MemoryInfo
    leonMssCpuUsage: CpuUsage
    leonMssMemoryUsage: MemoryInfo
    def __init__(self) -> None:
        ...
    


class RawToFConfig(RawBuffer):
    class DepthParams:
        class TypeFMod:
            __members__: ClassVar[dict] = ...
            ALL: ClassVar[RawToFConfig.DepthParams.TypeFMod] = ...
            MAX: ClassVar[RawToFConfig.DepthParams.TypeFMod] = ...
            MIN: ClassVar[RawToFConfig.DepthParams.TypeFMod] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        avgPhaseShuffle: bool
        enable: bool
        freqModUsed: RawToFConfig.DepthParams.TypeFMod
        minimumAmplitude: float
        def __init__(self) -> None:
            ...
        
    
    
    depthParams: RawToFConfig.DepthParams
    def __init__(self) -> None:
        ...
    


class RawTrackedFeatures(RawBuffer):
    trackedFeatures: List[TrackedFeature]
    def __init__(self) -> None:
        ...
    


class RawTracklets(RawBuffer):
    tracklets: List[Tracklet]
    def __init__(self) -> None:
        ...
    


class Rect:
    height: float
    width: float
    x: float
    y: float
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None:
        ...
    
    @overload
    def __init__(self, arg0: Point2f, arg1: Point2f) -> None:
        ...
    
    @overload
    def __init__(self, arg0: Point2f, arg1: Size2f) -> None:
        ...
    
    def area(self) -> float:
        ...
    
    def bottomRight(self) -> Point2f:
        ...
    
    def contains(self, arg0: Point2f) -> bool:
        ...
    
    def denormalize(self, width: int, height: int) -> Rect:
        ...
    
    def empty(self) -> bool:
        ...
    
    def isNormalized(self) -> bool:
        ...
    
    def normalize(self, width: int, height: int) -> Rect:
        ...
    
    def size(self) -> Size2f:
        ...
    
    def topLeft(self) -> Point2f:
        ...
    


class RotatedRect:
    angle: float
    center: Point2f
    size: Size2f
    def __init__(self) -> None:
        ...
    


class SPIInProperties:
    busId: int
    maxDataSize: int
    numFrames: int
    streamName: str
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SPIOutProperties:
    busId: int
    streamName: str
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ScriptProperties:
    processor: ProcessorType
    scriptName: str
    scriptUri: str
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SerializationType:
    __members__: ClassVar[dict] = ...
    JSON: ClassVar[SerializationType] = ...
    JSON_MSGPACK: ClassVar[SerializationType] = ...
    LIBNOP: ClassVar[SerializationType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class Size2f:
    height: float
    width: float
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, arg0: float, arg1: float) -> None:
        ...
    


class SpatialDetectionNetworkProperties(DetectionNetworkProperties):
    depthThresholds: SpatialLocationCalculatorConfigThresholds
    detectedBBScaleFactor: float
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SpatialImgDetection(ImgDetection):
    boundingBoxMapping: SpatialLocationCalculatorConfigData
    spatialCoordinates: Point3f
    def __init__(self) -> None:
        ...
    


class SpatialImgDetections(Buffer):
    detections: List[SpatialImgDetection]
    def __init__(self) -> None:
        ...
    
    def getSequenceNum(self) -> int:
        ...
    
    def getTimestamp(self) -> datetime.timedelta:
        ...
    
    def getTimestampDevice(self) -> datetime.timedelta:
        ...
    
    def setSequenceNum(self, arg0: int) -> SpatialImgDetections:
        ...
    
    def setTimestamp(self, arg0: datetime.timedelta) -> SpatialImgDetections:
        ...
    
    def setTimestampDevice(self, arg0: datetime.timedelta) -> SpatialImgDetections:
        ...
    


class SpatialLocationCalculatorAlgorithm:
    __members__: ClassVar[dict] = ...
    AVERAGE: ClassVar[SpatialLocationCalculatorAlgorithm] = ...
    MAX: ClassVar[SpatialLocationCalculatorAlgorithm] = ...
    MEAN: ClassVar[SpatialLocationCalculatorAlgorithm] = ...
    MEDIAN: ClassVar[SpatialLocationCalculatorAlgorithm] = ...
    MIN: ClassVar[SpatialLocationCalculatorAlgorithm] = ...
    MODE: ClassVar[SpatialLocationCalculatorAlgorithm] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class SpatialLocationCalculatorConfig(Buffer):
    def __init__(self) -> None:
        ...
    
    def addROI(self, ROI: SpatialLocationCalculatorConfigData) -> None:
        ...
    
    def get(self, *args, **kwargs) -> Any:
        ...
    
    def getConfigData(self) -> List[SpatialLocationCalculatorConfigData]:
        ...
    
    def set(self, config) -> SpatialLocationCalculatorConfig:
        ...
    
    def setROIs(self, ROIs: List[SpatialLocationCalculatorConfigData]) -> None:
        ...
    


class SpatialLocationCalculatorConfigData:
    calculationAlgorithm: SpatialLocationCalculatorAlgorithm
    depthThresholds: SpatialLocationCalculatorConfigThresholds
    roi: Rect
    def __init__(self) -> None:
        ...
    


class SpatialLocationCalculatorConfigThresholds:
    lowerThreshold: int
    upperThreshold: int
    def __init__(self) -> None:
        ...
    


class SpatialLocationCalculatorData(Buffer):
    spatialLocations: List[SpatialLocations]
    def __init__(self) -> None:
        ...
    
    def getSequenceNum(self) -> int:
        ...
    
    def getSpatialLocations(self) -> List[SpatialLocations]:
        ...
    
    def getTimestamp(self) -> datetime.timedelta:
        ...
    
    def getTimestampDevice(self) -> datetime.timedelta:
        ...
    
    def setSequenceNum(self, arg0: int) -> SpatialLocationCalculatorData:
        ...
    
    def setTimestamp(self, arg0: datetime.timedelta) -> SpatialLocationCalculatorData:
        ...
    
    def setTimestampDevice(self, arg0: datetime.timedelta) -> SpatialLocationCalculatorData:
        ...
    


class SpatialLocationCalculatorProperties:
    roiConfig: Any
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SpatialLocations:
    config: SpatialLocationCalculatorConfigData
    depthAverage: float
    depthAveragePixelCount: int
    depthMax: int
    depthMedian: float
    depthMin: int
    depthMode: float
    spatialCoordinates: Point3f
    def __init__(self) -> None:
        ...
    


class StereoDepthConfig(Buffer):
    class AlgorithmControl:
        class DepthAlign:
            __members__: ClassVar[dict] = ...
            CENTER: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthAlign] = ...
            RECTIFIED_LEFT: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthAlign] = ...
            RECTIFIED_RIGHT: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthAlign] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        class DepthUnit:
            __members__: ClassVar[dict] = ...
            CENTIMETER: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthUnit] = ...
            CUSTOM: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthUnit] = ...
            FOOT: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthUnit] = ...
            INCH: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthUnit] = ...
            METER: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthUnit] = ...
            MILLIMETER: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthUnit] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        centerAlignmentShiftFactor: Optional[float]
        customDepthUnitMultiplier: float
        depthAlign: RawStereoDepthConfig.AlgorithmControl.DepthAlign
        depthUnit: RawStereoDepthConfig.AlgorithmControl.DepthUnit
        disparityShift: int
        enableExtended: bool
        enableLeftRightCheck: bool
        enableSubpixel: bool
        leftRightCheckThreshold: int
        numInvalidateEdgePixels: int
        subpixelFractionalBits: int
        def __init__(self) -> None:
            ...
        
    
    
    class CensusTransform:
        class KernelSize:
            __members__: ClassVar[dict] = ...
            AUTO: ClassVar[RawStereoDepthConfig.CensusTransform.KernelSize] = ...
            KERNEL_5x5: ClassVar[RawStereoDepthConfig.CensusTransform.KernelSize] = ...
            KERNEL_7x7: ClassVar[RawStereoDepthConfig.CensusTransform.KernelSize] = ...
            KERNEL_7x9: ClassVar[RawStereoDepthConfig.CensusTransform.KernelSize] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        enableMeanMode: bool
        kernelMask: int
        kernelSize: RawStereoDepthConfig.CensusTransform.KernelSize
        threshold: int
        def __init__(self) -> None:
            ...
        
    
    
    class CostAggregation:
        divisionFactor: int
        horizontalPenaltyCostP1: int
        horizontalPenaltyCostP2: int
        verticalPenaltyCostP1: int
        verticalPenaltyCostP2: int
        def __init__(self) -> None:
            ...
        
    
    
    class CostMatching:
        class DisparityWidth:
            __members__: ClassVar[dict] = ...
            DISPARITY_64: ClassVar[RawStereoDepthConfig.CostMatching.DisparityWidth] = ...
            DISPARITY_96: ClassVar[RawStereoDepthConfig.CostMatching.DisparityWidth] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        class LinearEquationParameters:
            alpha: int
            beta: int
            threshold: int
            def __init__(self) -> None:
                ...
            
        
        
        confidenceThreshold: int
        disparityWidth: RawStereoDepthConfig.CostMatching.DisparityWidth
        enableCompanding: bool
        invalidDisparityValue: int
        linearEquationParameters: RawStereoDepthConfig.CostMatching.LinearEquationParameters
        def __init__(self) -> None:
            ...
        
    
    
    class MedianFilter:
        __members__: ClassVar[dict] = ...
        KERNEL_3x3: ClassVar[MedianFilter] = ...
        KERNEL_5x5: ClassVar[MedianFilter] = ...
        KERNEL_7x7: ClassVar[MedianFilter] = ...
        MEDIAN_OFF: ClassVar[MedianFilter] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class PostProcessing:
        class BrightnessFilter:
            maxBrightness: int
            minBrightness: int
            def __init__(self) -> None:
                ...
            
        
        
        class DecimationFilter:
            class DecimationMode:
                __members__: ClassVar[dict] = ...
                NON_ZERO_MEAN: ClassVar[RawStereoDepthConfig.PostProcessing.DecimationFilter.DecimationMode] = ...
                NON_ZERO_MEDIAN: ClassVar[RawStereoDepthConfig.PostProcessing.DecimationFilter.DecimationMode] = ...
                PIXEL_SKIPPING: ClassVar[RawStereoDepthConfig.PostProcessing.DecimationFilter.DecimationMode] = ...
                __entries: ClassVar[dict] = ...
                def __init__(self, value: int) -> None:
                    ...
                
                def __eq__(self, other: object) -> bool:
                    ...
                
                def __getstate__(self) -> int:
                    ...
                
                def __hash__(self) -> int:
                    ...
                
                def __index__(self) -> int:
                    ...
                
                def __int__(self) -> int:
                    ...
                
                def __ne__(self, other: object) -> bool:
                    ...
                
                def __setstate__(self, state: int) -> None:
                    ...
                
                @property
                def name(self) -> str:
                    ...
                
                @property
                def value(self) -> int:
                    ...
                
            
            
            decimationFactor: int
            decimationMode: RawStereoDepthConfig.PostProcessing.DecimationFilter.DecimationMode
            def __init__(self) -> None:
                ...
            
        
        
        class SpatialFilter:
            alpha: float
            delta: int
            enable: bool
            holeFillingRadius: int
            numIterations: int
            def __init__(self) -> None:
                ...
            
        
        
        class SpeckleFilter:
            enable: bool
            speckleRange: int
            def __init__(self) -> None:
                ...
            
        
        
        class TemporalFilter:
            class PersistencyMode:
                __members__: ClassVar[dict] = ...
                PERSISTENCY_INDEFINITELY: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                PERSISTENCY_OFF: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                VALID_1_IN_LAST_2: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                VALID_1_IN_LAST_5: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                VALID_1_IN_LAST_8: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                VALID_2_IN_LAST_3: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                VALID_2_IN_LAST_4: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                VALID_2_OUT_OF_8: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                VALID_8_OUT_OF_8: ClassVar[RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode] = ...
                __entries: ClassVar[dict] = ...
                def __init__(self, value: int) -> None:
                    ...
                
                def __eq__(self, other: object) -> bool:
                    ...
                
                def __getstate__(self) -> int:
                    ...
                
                def __hash__(self) -> int:
                    ...
                
                def __index__(self) -> int:
                    ...
                
                def __int__(self) -> int:
                    ...
                
                def __ne__(self, other: object) -> bool:
                    ...
                
                def __setstate__(self, state: int) -> None:
                    ...
                
                @property
                def name(self) -> str:
                    ...
                
                @property
                def value(self) -> int:
                    ...
                
            
            
            alpha: float
            delta: int
            enable: bool
            persistencyMode: RawStereoDepthConfig.PostProcessing.TemporalFilter.PersistencyMode
            def __init__(self) -> None:
                ...
            
        
        
        class ThresholdFilter:
            maxRange: int
            minRange: int
            def __init__(self) -> None:
                ...
            
        
        
        bilateralSigmaValue: int
        brightnessFilter: RawStereoDepthConfig.PostProcessing.BrightnessFilter
        decimationFilter: RawStereoDepthConfig.PostProcessing.DecimationFilter
        median: MedianFilter
        spatialFilter: RawStereoDepthConfig.PostProcessing.SpatialFilter
        speckleFilter: RawStereoDepthConfig.PostProcessing.SpeckleFilter
        temporalFilter: RawStereoDepthConfig.PostProcessing.TemporalFilter
        thresholdFilter: RawStereoDepthConfig.PostProcessing.ThresholdFilter
        def __init__(self) -> None:
            ...
        
    
    
    def __init__(self) -> None:
        ...
    
    def get(self) -> RawStereoDepthConfig:
        ...
    
    def getBilateralFilterSigma(self) -> int:
        ...
    
    def getConfidenceThreshold(self) -> int:
        ...
    
    def getDepthUnit(self) -> RawStereoDepthConfig.AlgorithmControl.DepthUnit:
        ...
    
    def getLeftRightCheckThreshold(self) -> int:
        ...
    
    def getMaxDisparity(self) -> float:
        ...
    
    def getMedianFilter(self) -> MedianFilter:
        ...
    
    def set(self, config: RawStereoDepthConfig) -> StereoDepthConfig:
        ...
    
    def setBilateralFilterSigma(self, sigma: int) -> StereoDepthConfig:
        ...
    
    def setConfidenceThreshold(self, confThr: int) -> StereoDepthConfig:
        ...
    
    def setDepthAlign(self, align: RawStereoDepthConfig.AlgorithmControl.DepthAlign) -> StereoDepthConfig:
        ...
    
    def setDepthUnit(self, arg0: RawStereoDepthConfig.AlgorithmControl.DepthUnit) -> StereoDepthConfig:
        ...
    
    def setDisparityShift(self, arg0: int) -> StereoDepthConfig:
        ...
    
    def setExtendedDisparity(self, enable: bool) -> StereoDepthConfig:
        ...
    
    def setLeftRightCheck(self, enable: bool) -> StereoDepthConfig:
        ...
    
    def setLeftRightCheckThreshold(self, sigma: int) -> StereoDepthConfig:
        ...
    
    def setMedianFilter(self, median: MedianFilter) -> StereoDepthConfig:
        ...
    
    def setNumInvalidateEdgePixels(self, arg0: int) -> StereoDepthConfig:
        ...
    
    def setSubpixel(self, enable: bool) -> StereoDepthConfig:
        ...
    
    def setSubpixelFractionalBits(self, subpixelFractionalBits: int) -> StereoDepthConfig:
        ...
    


class StereoDepthProperties:
    class DepthAlign:
        __members__: ClassVar[dict] = ...
        CENTER: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthAlign] = ...
        RECTIFIED_LEFT: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthAlign] = ...
        RECTIFIED_RIGHT: ClassVar[RawStereoDepthConfig.AlgorithmControl.DepthAlign] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class MedianFilter:
        __members__: ClassVar[dict] = ...
        KERNEL_3x3: ClassVar[MedianFilter] = ...
        KERNEL_5x5: ClassVar[MedianFilter] = ...
        KERNEL_7x7: ClassVar[MedianFilter] = ...
        MEDIAN_OFF: ClassVar[MedianFilter] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class RectificationMesh:
        meshLeftUri: str
        meshRightUri: str
        meshSize: Optional[int]
        stepHeight: int
        stepWidth: int
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    alphaScaling: Optional[float]
    baseline: Optional[float]
    depthAlignCamera: CameraBoardSocket
    depthAlignmentUseSpecTranslation: bool
    disparityToDepthUseSpecTranslation: bool
    enableRectification: bool
    enableRuntimeStereoModeSwitch: bool
    focalLength: Optional[float]
    focalLengthFromCalibration: bool
    height: Optional[int]
    initialConfig: RawStereoDepthConfig
    mesh: StereoDepthProperties.RectificationMesh
    numFramesPool: int
    numPostProcessingMemorySlices: int
    numPostProcessingShaves: int
    outHeight: Optional[int]
    outKeepAspectRatio: bool
    outWidth: Optional[int]
    rectificationUseSpecTranslation: bool
    rectifyEdgeFillColor: int
    useHomographyRectification: Optional[bool]
    width: Optional[int]
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class StereoRectification:
    leftCameraSocket: CameraBoardSocket
    rectifiedRotationLeft: List[List[float]]
    rectifiedRotationRight: List[List[float]]
    rightCameraSocket: CameraBoardSocket
    def __init__(self) -> None:
        ...
    


class SystemInformation(Buffer):
    chipTemperature: ChipTemperature
    cmxMemoryUsage: MemoryInfo
    ddrMemoryUsage: MemoryInfo
    leonCssCpuUsage: CpuUsage
    leonCssMemoryUsage: MemoryInfo
    leonMssCpuUsage: CpuUsage
    leonMssMemoryUsage: MemoryInfo
    def __init__(self) -> None:
        ...
    


class SystemLoggerProperties:
    rateHz: float
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TensorInfo:
    class DataType:
        __members__: ClassVar[dict] = ...
        FP16: ClassVar[TensorInfo.DataType] = ...
        FP32: ClassVar[TensorInfo.DataType] = ...
        I8: ClassVar[TensorInfo.DataType] = ...
        INT: ClassVar[TensorInfo.DataType] = ...
        U8F: ClassVar[TensorInfo.DataType] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class StorageOrder:
        __members__: ClassVar[dict] = ...
        C: ClassVar[TensorInfo.StorageOrder] = ...
        CHW: ClassVar[TensorInfo.StorageOrder] = ...
        CN: ClassVar[TensorInfo.StorageOrder] = ...
        CWH: ClassVar[TensorInfo.StorageOrder] = ...
        H: ClassVar[TensorInfo.StorageOrder] = ...
        HCW: ClassVar[TensorInfo.StorageOrder] = ...
        HWC: ClassVar[TensorInfo.StorageOrder] = ...
        NC: ClassVar[TensorInfo.StorageOrder] = ...
        NCHW: ClassVar[TensorInfo.StorageOrder] = ...
        NHCW: ClassVar[TensorInfo.StorageOrder] = ...
        NHWC: ClassVar[TensorInfo.StorageOrder] = ...
        W: ClassVar[TensorInfo.StorageOrder] = ...
        WCH: ClassVar[TensorInfo.StorageOrder] = ...
        WHC: ClassVar[TensorInfo.StorageOrder] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    dataType: TensorInfo.DataType
    dims: List[int]
    name: str
    numDimensions: int
    offset: int
    order: TensorInfo.StorageOrder
    strides: List[int]
    def __init__(self) -> None:
        ...
    


class Timestamp:
    nsec: int
    sec: int
    def __init__(self) -> None:
        ...
    
    def get(self) -> datetime.timedelta:
        ...
    


class ToFConfig(Buffer):
    class DepthParams:
        class TypeFMod:
            __members__: ClassVar[dict] = ...
            ALL: ClassVar[RawToFConfig.DepthParams.TypeFMod] = ...
            MAX: ClassVar[RawToFConfig.DepthParams.TypeFMod] = ...
            MIN: ClassVar[RawToFConfig.DepthParams.TypeFMod] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        avgPhaseShuffle: bool
        enable: bool
        freqModUsed: RawToFConfig.DepthParams.TypeFMod
        minimumAmplitude: float
        def __init__(self) -> None:
            ...
        
    
    
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, arg0: RawToFConfig) -> None:
        ...
    
    def get(self) -> RawToFConfig:
        ...
    
    def set(self, config: RawToFConfig) -> ToFConfig:
        ...
    
    def setAvgPhaseShuffle(self, arg0: bool) -> ToFConfig:
        ...
    
    def setDepthParams(self, config: RawToFConfig.DepthParams) -> ToFConfig:
        ...
    
    def setFreqModUsed(self, arg0: RawToFConfig.DepthParams.TypeFMod) -> ToFConfig:
        ...
    
    def setMinAmplitude(self, arg0: float) -> ToFConfig:
        ...
    


class ToFProperties:
    initialConfig: RawToFConfig
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TrackedFeature:
    age: int
    harrisScore: float
    id: int
    position: Point2f
    trackingError: float
    def __init__(self) -> None:
        ...
    


class TrackedFeatures(Buffer):
    trackedFeatures: List[TrackedFeature]
    def __init__(self) -> None:
        ...
    
    def getSequenceNum(self) -> int:
        ...
    
    def getTimestamp(self) -> datetime.timedelta:
        ...
    
    def getTimestampDevice(self) -> datetime.timedelta:
        ...
    
    def setSequenceNum(self, arg0: int) -> TrackedFeatures:
        ...
    
    def setTimestamp(self, arg0: datetime.timedelta) -> TrackedFeatures:
        ...
    
    def setTimestampDevice(self, arg0: datetime.timedelta) -> TrackedFeatures:
        ...
    


class TrackerIdAssignmentPolicy:
    __members__: ClassVar[dict] = ...
    SMALLEST_ID: ClassVar[TrackerIdAssignmentPolicy] = ...
    UNIQUE_ID: ClassVar[TrackerIdAssignmentPolicy] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class TrackerType:
    __members__: ClassVar[dict] = ...
    SHORT_TERM_IMAGELESS: ClassVar[TrackerType] = ...
    SHORT_TERM_KCF: ClassVar[TrackerType] = ...
    ZERO_TERM_COLOR_HISTOGRAM: ClassVar[TrackerType] = ...
    ZERO_TERM_IMAGELESS: ClassVar[TrackerType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class Tracklet:
    class TrackingStatus:
        __members__: ClassVar[dict] = ...
        LOST: ClassVar[Tracklet.TrackingStatus] = ...
        NEW: ClassVar[Tracklet.TrackingStatus] = ...
        REMOVED: ClassVar[Tracklet.TrackingStatus] = ...
        TRACKED: ClassVar[Tracklet.TrackingStatus] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    age: int
    id: int
    label: int
    roi: Rect
    spatialCoordinates: Point3f
    srcImgDetection: ImgDetection
    status: Tracklet.TrackingStatus
    def __init__(self) -> None:
        ...
    


class Tracklets(Buffer):
    tracklets: List[Tracklet]
    def __init__(self) -> None:
        ...
    
    def getSequenceNum(self) -> int:
        ...
    
    def getTimestamp(self) -> datetime.timedelta:
        ...
    
    def getTimestampDevice(self) -> datetime.timedelta:
        ...
    
    def setSequenceNum(self, arg0: int) -> Tracklets:
        ...
    
    def setTimestamp(self, arg0: datetime.timedelta) -> Tracklets:
        ...
    
    def setTimestampDevice(self, arg0: datetime.timedelta) -> Tracklets:
        ...
    


class UVCProperties:
    gpioInit: Dict[int, int]
    gpioStreamOff: Dict[int, int]
    gpioStreamOn: Dict[int, int]
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UsbSpeed:
    __members__: ClassVar[dict] = ...
    FULL: ClassVar[UsbSpeed] = ...
    HIGH: ClassVar[UsbSpeed] = ...
    LOW: ClassVar[UsbSpeed] = ...
    SUPER: ClassVar[UsbSpeed] = ...
    SUPER_PLUS: ClassVar[UsbSpeed] = ...
    UNKNOWN: ClassVar[UsbSpeed] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class Version:
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self, v: str) -> None:
        ...
    
    @overload
    def __init__(self, major: int, minor: int, patch: int) -> None:
        ...
    
    def getBuildInfo(self) -> str:
        ...
    
    def getSemver(self) -> Version:
        ...
    
    def toStringSemver(self) -> str:
        ...
    
    def __eq__(self, arg0: Version) -> bool:
        ...
    
    def __gt__(self, arg0: Version) -> bool:
        ...
    
    def __lt__(self, arg0: Version) -> bool:
        ...
    


class VideoEncoderProperties:
    class Profile:
        __members__: ClassVar[dict] = ...
        H264_BASELINE: ClassVar[VideoEncoderProperties.Profile] = ...
        H264_HIGH: ClassVar[VideoEncoderProperties.Profile] = ...
        H264_MAIN: ClassVar[VideoEncoderProperties.Profile] = ...
        H265_MAIN: ClassVar[VideoEncoderProperties.Profile] = ...
        MJPEG: ClassVar[VideoEncoderProperties.Profile] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class RateControlMode:
        __members__: ClassVar[dict] = ...
        CBR: ClassVar[VideoEncoderProperties.RateControlMode] = ...
        VBR: ClassVar[VideoEncoderProperties.RateControlMode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    bitrate: int
    keyframeFrequency: int
    maxBitrate: int
    numBFrames: int
    numFramesPool: int
    outputFrameSize: int
    profile: VideoEncoderProperties.Profile
    quality: int
    rateCtrlMode: VideoEncoderProperties.RateControlMode
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class WarpProperties:
    class Interpolation:
        __members__: ClassVar[dict] = ...
        BICUBIC: ClassVar[WarpProperties.Interpolation] = ...
        BILINEAR: ClassVar[WarpProperties.Interpolation] = ...
        BYPASS: ClassVar[WarpProperties.Interpolation] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLinkConnection:
    @overload
    def __init__(self, arg0: DeviceInfo, arg1: List[int]) -> None:
        ...
    
    @overload
    def __init__(self, arg0: DeviceInfo, arg1: str) -> None:
        ...
    
    @overload
    def __init__(self, arg0: DeviceInfo) -> None:
        ...
    
    @classmethod
    def bootBootloader(cls, devInfo: DeviceInfo) -> DeviceInfo:
        ...
    
    @classmethod
    def getAllConnectedDevices(cls, state: XLinkDeviceState = ..., skipInvalidDevices: bool = ...) -> List[DeviceInfo]:
        ...
    
    @classmethod
    def getDeviceByMxId(cls, mxId: str, state: XLinkDeviceState = ..., skipInvalidDevice: bool = ...) -> Tuple[bool, DeviceInfo]:
        ...
    
    @classmethod
    def getFirstDevice(cls, state: XLinkDeviceState = ..., skipInvalidDevice: bool = ...) -> Tuple[bool, DeviceInfo]:
        ...
    
    @classmethod
    def getGlobalProfilingData(cls) -> ProfilingData:
        ...
    


class XLinkDeviceState:
    __members__: ClassVar[dict] = ...
    X_LINK_ANY_STATE: ClassVar[XLinkDeviceState] = ...
    X_LINK_BOOTED: ClassVar[XLinkDeviceState] = ...
    X_LINK_BOOTLOADER: ClassVar[XLinkDeviceState] = ...
    X_LINK_FLASH_BOOTED: ClassVar[XLinkDeviceState] = ...
    X_LINK_UNBOOTED: ClassVar[XLinkDeviceState] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class XLinkError(RuntimeError):
    ...


class XLinkError_t:
    __members__: ClassVar[dict] = ...
    X_LINK_ALREADY_OPEN: ClassVar[XLinkError_t] = ...
    X_LINK_COMMUNICATION_FAIL: ClassVar[XLinkError_t] = ...
    X_LINK_COMMUNICATION_NOT_OPEN: ClassVar[XLinkError_t] = ...
    X_LINK_COMMUNICATION_UNKNOWN_ERROR: ClassVar[XLinkError_t] = ...
    X_LINK_DEVICE_ALREADY_IN_USE: ClassVar[XLinkError_t] = ...
    X_LINK_DEVICE_NOT_FOUND: ClassVar[XLinkError_t] = ...
    X_LINK_ERROR: ClassVar[XLinkError_t] = ...
    X_LINK_INIT_PCIE_ERROR: ClassVar[XLinkError_t] = ...
    X_LINK_INIT_TCP_IP_ERROR: ClassVar[XLinkError_t] = ...
    X_LINK_INIT_USB_ERROR: ClassVar[XLinkError_t] = ...
    X_LINK_INSUFFICIENT_PERMISSIONS: ClassVar[XLinkError_t] = ...
    X_LINK_NOT_IMPLEMENTED: ClassVar[XLinkError_t] = ...
    X_LINK_OUT_OF_MEMORY: ClassVar[XLinkError_t] = ...
    X_LINK_SUCCESS: ClassVar[XLinkError_t] = ...
    X_LINK_TIMEOUT: ClassVar[XLinkError_t] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class XLinkInProperties:
    maxDataSize: int
    numFrames: int
    streamName: str
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLinkOutProperties:
    maxFpsLimit: float
    metadataOnly: bool
    streamName: str
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLinkPlatform:
    __members__: ClassVar[dict] = ...
    X_LINK_ANY_PLATFORM: ClassVar[XLinkPlatform] = ...
    X_LINK_MYRIAD_2: ClassVar[XLinkPlatform] = ...
    X_LINK_MYRIAD_X: ClassVar[XLinkPlatform] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class XLinkProtocol:
    __members__: ClassVar[dict] = ...
    X_LINK_ANY_PROTOCOL: ClassVar[XLinkProtocol] = ...
    X_LINK_IPC: ClassVar[XLinkProtocol] = ...
    X_LINK_NMB_OF_PROTOCOLS: ClassVar[XLinkProtocol] = ...
    X_LINK_PCIE: ClassVar[XLinkProtocol] = ...
    X_LINK_TCP_IP: ClassVar[XLinkProtocol] = ...
    X_LINK_USB_CDC: ClassVar[XLinkProtocol] = ...
    X_LINK_USB_VSC: ClassVar[XLinkProtocol] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __getstate__(self) -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __index__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __ne__(self, other: object) -> bool:
        ...
    
    def __setstate__(self, state: int) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def value(self) -> int:
        ...
    


class XLinkReadError(XLinkError):
    ...


class XLinkWriteError(XLinkError):
    ...


def isDatatypeSubclassOf(arg0: DatatypeEnum, arg1: DatatypeEnum) -> bool:
    ...

