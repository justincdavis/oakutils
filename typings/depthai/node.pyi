"""
This type stub file was generated by pyright.
"""

import depthai
from pathlib import Path
from typing import Any, ClassVar, Dict, List, Optional, Tuple, overload

class AprilTag(depthai.Node):
    class Properties:
        initialConfig: depthai.RawAprilTagConfig
        inputConfigSync: bool
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def setWaitForConfigInput(self, wait: bool) -> None:
        ...
    
    @property
    def initialConfig(self) -> depthai.AprilTagConfig:
        ...
    
    @property
    def inputConfig(self) -> depthai.Node.Input:
        ...
    
    @property
    def inputImage(self) -> depthai.Node.Input:
        ...
    
    @property
    def out(self) -> depthai.Node.Output:
        ...
    
    @property
    def passthroughInputImage(self) -> depthai.Node.Output:
        ...
    


class Camera(depthai.Node):
    class Properties:
        class ColorOrder:
            __members__: ClassVar[dict] = ...
            BGR: ClassVar[depthai.CameraProperties.ColorOrder] = ...
            RGB: ClassVar[depthai.CameraProperties.ColorOrder] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        class WarpMeshSource:
            __members__: ClassVar[dict] = ...
            AUTO: ClassVar[depthai.CameraProperties.WarpMeshSource] = ...
            CALIBRATION: ClassVar[depthai.CameraProperties.WarpMeshSource] = ...
            NONE: ClassVar[depthai.CameraProperties.WarpMeshSource] = ...
            URI: ClassVar[depthai.CameraProperties.WarpMeshSource] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        boardSocket: depthai.CameraBoardSocket
        calibAlpha: float
        colorOrder: depthai.CameraProperties.ColorOrder
        fp16: bool
        fps: float
        imageOrientation: depthai.CameraImageOrientation
        initialControl: depthai.RawCameraControl
        interleaved: bool
        isp3aFps: int
        ispScale: Any
        numFramesPoolIsp: int
        numFramesPoolPreview: int
        numFramesPoolRaw: int
        numFramesPoolStill: int
        numFramesPoolVideo: int
        previewHeight: int
        previewKeepAspectRatio: bool
        previewWidth: int
        sensorCropX: float
        sensorCropY: float
        stillHeight: int
        stillWidth: int
        videoHeight: int
        videoWidth: int
        warpMeshHeight: int
        warpMeshSource: depthai.CameraProperties.WarpMeshSource
        warpMeshStepHeight: int
        warpMeshStepWidth: int
        warpMeshUri: str
        warpMeshWidth: int
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getBoardSocket(self) -> depthai.CameraBoardSocket:
        ...
    
    def getCalibrationAlpha(self) -> float:
        ...
    
    def getCamera(self) -> str:
        ...
    
    def getFps(self) -> float:
        ...
    
    def getHeight(self) -> int:
        ...
    
    def getImageOrientation(self) -> depthai.CameraImageOrientation:
        ...
    
    def getMeshSource(self) -> depthai.CameraProperties.WarpMeshSource:
        ...
    
    def getMeshStep(self) -> Tuple[int, int]:
        ...
    
    def getPreviewHeight(self) -> int:
        ...
    
    def getPreviewSize(self) -> Tuple[int, int]:
        ...
    
    def getPreviewWidth(self) -> int:
        ...
    
    def getSize(self) -> Tuple[int, int]:
        ...
    
    def getStillHeight(self) -> int:
        ...
    
    def getStillSize(self) -> Tuple[int, int]:
        ...
    
    def getStillWidth(self) -> int:
        ...
    
    def getVideoHeight(self) -> int:
        ...
    
    def getVideoSize(self) -> Tuple[int, int]:
        ...
    
    def getVideoWidth(self) -> int:
        ...
    
    def getWidth(self) -> int:
        ...
    
    def loadMeshData(self, warpMesh: buffer) -> None:
        ...
    
    def loadMeshFile(self, warpMesh: Path) -> None:
        ...
    
    def setBoardSocket(self, boardSocket: depthai.CameraBoardSocket) -> None:
        ...
    
    def setCalibrationAlpha(self, alpha: float) -> None:
        ...
    
    def setCamera(self, name: str) -> None:
        ...
    
    def setFps(self, fps: float) -> None:
        ...
    
    def setImageOrientation(self, imageOrientation: depthai.CameraImageOrientation) -> None:
        ...
    
    def setIsp3aFps(self, arg0: int) -> None:
        ...
    
    def setMeshSource(self, source: depthai.CameraProperties.WarpMeshSource) -> None:
        ...
    
    def setMeshStep(self, width: int, height: int) -> None:
        ...
    
    @overload
    def setPreviewSize(self, width: int, height: int) -> None:
        ...
    
    @overload
    def setPreviewSize(self, size: Tuple[int, int]) -> None:
        ...
    
    def setRawOutputPacked(self, packed: bool) -> None:
        ...
    
    @overload
    def setSize(self, width: int, height: int) -> None:
        ...
    
    @overload
    def setSize(self, size: Tuple[int, int]) -> None:
        ...
    
    @overload
    def setStillSize(self, width: int, height: int) -> None:
        ...
    
    @overload
    def setStillSize(self, size: Tuple[int, int]) -> None:
        ...
    
    @overload
    def setVideoSize(self, width: int, height: int) -> None:
        ...
    
    @overload
    def setVideoSize(self, size: Tuple[int, int]) -> None:
        ...
    
    @property
    def frameEvent(self) -> depthai.Node.Output:
        ...
    
    @property
    def initialControl(self) -> depthai.CameraControl:
        ...
    
    @property
    def inputConfig(self) -> depthai.Node.Input:
        ...
    
    @property
    def inputControl(self) -> depthai.Node.Input:
        ...
    
    @property
    def isp(self) -> depthai.Node.Output:
        ...
    
    @property
    def preview(self) -> depthai.Node.Output:
        ...
    
    @property
    def raw(self) -> depthai.Node.Output:
        ...
    
    @property
    def still(self) -> depthai.Node.Output:
        ...
    
    @property
    def video(self) -> depthai.Node.Output:
        ...
    


class ColorCamera(depthai.Node):
    class Properties:
        class ColorOrder:
            __members__: ClassVar[dict] = ...
            BGR: ClassVar[depthai.ColorCameraProperties.ColorOrder] = ...
            RGB: ClassVar[depthai.ColorCameraProperties.ColorOrder] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        class SensorResolution:
            __members__: ClassVar[dict] = ...
            THE_1080_P: ClassVar[depthai.ColorCameraProperties.SensorResolution] = ...
            THE_1200_P: ClassVar[depthai.ColorCameraProperties.SensorResolution] = ...
            THE_12_MP: ClassVar[depthai.ColorCameraProperties.SensorResolution] = ...
            THE_13_MP: ClassVar[depthai.ColorCameraProperties.SensorResolution] = ...
            THE_1440X1080: ClassVar[depthai.ColorCameraProperties.SensorResolution] = ...
            THE_4000X3000: ClassVar[depthai.ColorCameraProperties.SensorResolution] = ...
            THE_48_MP: ClassVar[depthai.ColorCameraProperties.SensorResolution] = ...
            THE_4_K: ClassVar[depthai.ColorCameraProperties.SensorResolution] = ...
            THE_5312X6000: ClassVar[depthai.ColorCameraProperties.SensorResolution] = ...
            THE_5_MP: ClassVar[depthai.ColorCameraProperties.SensorResolution] = ...
            THE_720_P: ClassVar[depthai.ColorCameraProperties.SensorResolution] = ...
            THE_800_P: ClassVar[depthai.ColorCameraProperties.SensorResolution] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        boardSocket: depthai.CameraBoardSocket
        colorOrder: depthai.ColorCameraProperties.ColorOrder
        eventFilter: List[depthai.FrameEvent]
        fp16: bool
        fps: float
        imageOrientation: depthai.CameraImageOrientation
        initialControl: depthai.RawCameraControl
        interleaved: bool
        isp3aFps: int
        ispScale: Any
        numFramesPoolIsp: int
        numFramesPoolPreview: int
        numFramesPoolRaw: int
        numFramesPoolStill: int
        numFramesPoolVideo: int
        previewHeight: int
        previewKeepAspectRatio: bool
        previewWidth: int
        resolution: depthai.ColorCameraProperties.SensorResolution
        sensorCropX: float
        sensorCropY: float
        stillHeight: int
        stillWidth: int
        videoHeight: int
        videoWidth: int
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getBoardSocket(self) -> depthai.CameraBoardSocket:
        ...
    
    def getCamId(self) -> int:
        ...
    
    def getCamera(self) -> str:
        ...
    
    def getColorOrder(self) -> depthai.ColorCameraProperties.ColorOrder:
        ...
    
    def getFp16(self) -> bool:
        ...
    
    def getFps(self) -> float:
        ...
    
    def getFrameEventFilter(self) -> List[depthai.FrameEvent]:
        ...
    
    def getImageOrientation(self) -> depthai.CameraImageOrientation:
        ...
    
    def getInterleaved(self) -> bool:
        ...
    
    def getIspHeight(self) -> int:
        ...
    
    def getIspNumFramesPool(self) -> int:
        ...
    
    def getIspSize(self) -> Tuple[int, int]:
        ...
    
    def getIspWidth(self) -> int:
        ...
    
    def getPreviewHeight(self) -> int:
        ...
    
    def getPreviewKeepAspectRatio(self) -> bool:
        ...
    
    def getPreviewNumFramesPool(self) -> int:
        ...
    
    def getPreviewSize(self) -> Tuple[int, int]:
        ...
    
    def getPreviewWidth(self) -> int:
        ...
    
    def getRawNumFramesPool(self) -> int:
        ...
    
    def getResolution(self) -> depthai.ColorCameraProperties.SensorResolution:
        ...
    
    def getResolutionHeight(self) -> int:
        ...
    
    def getResolutionSize(self) -> Tuple[int, int]:
        ...
    
    def getResolutionWidth(self) -> int:
        ...
    
    def getSensorCrop(self) -> Tuple[float, float]:
        ...
    
    def getSensorCropX(self) -> float:
        ...
    
    def getSensorCropY(self) -> float:
        ...
    
    def getStillHeight(self) -> int:
        ...
    
    def getStillNumFramesPool(self) -> int:
        ...
    
    def getStillSize(self) -> Tuple[int, int]:
        ...
    
    def getStillWidth(self) -> int:
        ...
    
    def getVideoHeight(self) -> int:
        ...
    
    def getVideoNumFramesPool(self) -> int:
        ...
    
    def getVideoSize(self) -> Tuple[int, int]:
        ...
    
    def getVideoWidth(self) -> int:
        ...
    
    def getWaitForConfigInput(self) -> bool:
        ...
    
    def sensorCenterCrop(self) -> None:
        ...
    
    def setBoardSocket(self, boardSocket: depthai.CameraBoardSocket) -> None:
        ...
    
    def setCamId(self, arg0: int) -> None:
        ...
    
    def setCamera(self, name: str) -> None:
        ...
    
    def setColorOrder(self, colorOrder: depthai.ColorCameraProperties.ColorOrder) -> None:
        ...
    
    def setFp16(self, fp16: bool) -> None:
        ...
    
    def setFps(self, fps: float) -> None:
        ...
    
    def setFrameEventFilter(self, events: List[depthai.FrameEvent]) -> None:
        ...
    
    def setImageOrientation(self, imageOrientation: depthai.CameraImageOrientation) -> None:
        ...
    
    def setInterleaved(self, interleaved: bool) -> None:
        ...
    
    def setIsp3aFps(self, arg0: int) -> None:
        ...
    
    def setIspNumFramesPool(self, arg0: int) -> None:
        ...
    
    @overload
    def setIspScale(self, numerator: int, denominator: int) -> None:
        ...
    
    @overload
    def setIspScale(self, scale: Tuple[int, int]) -> None:
        ...
    
    @overload
    def setIspScale(self, horizNum: int, horizDenom: int, vertNum: int, vertDenom: int) -> None:
        ...
    
    @overload
    def setIspScale(self, horizScale: Tuple[int, int], vertScale: Tuple[int, int]) -> None:
        ...
    
    def setNumFramesPool(self, raw: int, isp: int, preview: int, video: int, still: int) -> None:
        ...
    
    def setPreviewKeepAspectRatio(self, keep: bool) -> None:
        ...
    
    def setPreviewNumFramesPool(self, arg0: int) -> None:
        ...
    
    @overload
    def setPreviewSize(self, width: int, height: int) -> None:
        ...
    
    @overload
    def setPreviewSize(self, size: Tuple[int, int]) -> None:
        ...
    
    def setRawNumFramesPool(self, arg0: int) -> None:
        ...
    
    def setRawOutputPacked(self, packed: bool) -> None:
        ...
    
    def setResolution(self, resolution: depthai.ColorCameraProperties.SensorResolution) -> None:
        ...
    
    def setSensorCrop(self, x: float, y: float) -> None:
        ...
    
    def setStillNumFramesPool(self, arg0: int) -> None:
        ...
    
    @overload
    def setStillSize(self, width: int, height: int) -> None:
        ...
    
    @overload
    def setStillSize(self, size: Tuple[int, int]) -> None:
        ...
    
    def setVideoNumFramesPool(self, arg0: int) -> None:
        ...
    
    @overload
    def setVideoSize(self, width: int, height: int) -> None:
        ...
    
    @overload
    def setVideoSize(self, size: Tuple[int, int]) -> None:
        ...
    
    def setWaitForConfigInput(self, wait: bool) -> None:
        ...
    
    @property
    def frameEvent(self) -> depthai.Node.Output:
        ...
    
    @property
    def initialControl(self) -> depthai.CameraControl:
        ...
    
    @property
    def inputConfig(self) -> depthai.Node.Input:
        ...
    
    @property
    def inputControl(self) -> depthai.Node.Input:
        ...
    
    @property
    def isp(self) -> depthai.Node.Output:
        ...
    
    @property
    def preview(self) -> depthai.Node.Output:
        ...
    
    @property
    def raw(self) -> depthai.Node.Output:
        ...
    
    @property
    def still(self) -> depthai.Node.Output:
        ...
    
    @property
    def video(self) -> depthai.Node.Output:
        ...
    


class DetectionNetwork(NeuralNetwork):
    class Properties(depthai.NeuralNetworkProperties):
        parser: depthai.DetectionParserOptions
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getConfidenceThreshold(self) -> float:
        ...
    
    def setConfidenceThreshold(self, thresh: float) -> None:
        ...
    
    @property
    def input(self) -> depthai.Node.Input:
        ...
    
    @property
    def out(self) -> depthai.Node.Output:
        ...
    
    @property
    def outNetwork(self) -> depthai.Node.Output:
        ...
    
    @property
    def passthrough(self) -> depthai.Node.Output:
        ...
    


class DetectionParser(depthai.Node):
    class Properties:
        parser: depthai.DetectionParserOptions
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getAnchorMasks(self) -> Dict[str, List[int]]:
        ...
    
    def getAnchors(self) -> List[float]:
        ...
    
    def getConfidenceThreshold(self) -> float:
        ...
    
    def getCoordinateSize(self) -> int:
        ...
    
    def getIouThreshold(self) -> float:
        ...
    
    def getNNFamily(self) -> depthai.DetectionNetworkType:
        ...
    
    def getNumClasses(self) -> int:
        ...
    
    def getNumFramesPool(self) -> int:
        ...
    
    def setAnchorMasks(self, anchorMasks: Dict[str, List[int]]) -> None:
        ...
    
    def setAnchors(self, anchors: List[float]) -> None:
        ...
    
    def setBlob(self, blob: depthai.OpenVINO.Blob) -> None:
        ...
    
    def setConfidenceThreshold(self, thresh: float) -> None:
        ...
    
    def setCoordinateSize(self, coordinates: int) -> None:
        ...
    
    def setIouThreshold(self, thresh: float) -> None:
        ...
    
    def setNNFamily(self, type: depthai.DetectionNetworkType) -> None:
        ...
    
    def setNumClasses(self, numClasses: int) -> None:
        ...
    
    def setNumFramesPool(self, numFramesPool: int) -> None:
        ...
    
    @property
    def input(self) -> depthai.Node.Input:
        ...
    
    @property
    def out(self) -> depthai.Node.Output:
        ...
    


class EdgeDetector(depthai.Node):
    class Properties:
        initialConfig: depthai.RawEdgeDetectorConfig
        numFramesPool: int
        outputFrameSize: int
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getWaitForConfigInput(self) -> bool:
        ...
    
    def setMaxOutputFrameSize(self, arg0: int) -> None:
        ...
    
    def setNumFramesPool(self, arg0: int) -> None:
        ...
    
    def setWaitForConfigInput(self, wait: bool) -> None:
        ...
    
    @property
    def initialConfig(self) -> depthai.EdgeDetectorConfig:
        ...
    
    @property
    def inputConfig(self) -> depthai.Node.Input:
        ...
    
    @property
    def inputImage(self) -> depthai.Node.Input:
        ...
    
    @property
    def outputImage(self) -> depthai.Node.Output:
        ...
    


class FeatureTracker(depthai.Node):
    class Properties:
        initialConfig: depthai.RawFeatureTrackerConfig
        numMemorySlices: int
        numShaves: int
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getWaitForConfigInput(self) -> bool:
        ...
    
    def setHardwareResources(self, numShaves: int, numMemorySlices: int) -> None:
        ...
    
    def setWaitForConfigInput(self, wait: bool) -> None:
        ...
    
    @property
    def initialConfig(self) -> depthai.FeatureTrackerConfig:
        ...
    
    @property
    def inputConfig(self) -> depthai.Node.Input:
        ...
    
    @property
    def inputImage(self) -> depthai.Node.Input:
        ...
    
    @property
    def outputFeatures(self) -> depthai.Node.Output:
        ...
    
    @property
    def passthroughInputImage(self) -> depthai.Node.Output:
        ...
    


class IMU(depthai.Node):
    class Properties:
        batchReportThreshold: int
        enableFirmwareUpdate: Optional[bool]
        imuSensors: List[depthai.IMUSensorConfig]
        maxBatchReports: int
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def enableFirmwareUpdate(self, arg0: bool) -> None:
        ...
    
    @overload
    def enableIMUSensor(self, sensorConfig: depthai.IMUSensorConfig) -> None:
        ...
    
    @overload
    def enableIMUSensor(self, sensorConfigs: List[depthai.IMUSensorConfig]) -> None:
        ...
    
    @overload
    def enableIMUSensor(self, sensor: depthai.IMUSensor, reportRate: int) -> None:
        ...
    
    @overload
    def enableIMUSensor(self, sensors: List[depthai.IMUSensor], reportRate: int) -> None:
        ...
    
    def getBatchReportThreshold(self) -> int:
        ...
    
    def getMaxBatchReports(self) -> int:
        ...
    
    def setBatchReportThreshold(self, batchReportThreshold: int) -> None:
        ...
    
    def setMaxBatchReports(self, maxBatchReports: int) -> None:
        ...
    
    @property
    def out(self) -> depthai.Node.Output:
        ...
    


class ImageManip(depthai.Node):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getWaitForConfigInput(self) -> bool:
        ...
    
    def setCenterCrop(self, arg0: float, arg1: float) -> None:
        ...
    
    def setCropRect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None:
        ...
    
    def setFrameType(self, arg0: depthai.RawImgFrame.Type) -> None:
        ...
    
    def setHorizontalFlip(self, arg0: bool) -> None:
        ...
    
    def setKeepAspectRatio(self, arg0: bool) -> None:
        ...
    
    def setMaxOutputFrameSize(self, arg0: int) -> None:
        ...
    
    def setNumFramesPool(self, arg0: int) -> None:
        ...
    
    def setResize(self, arg0: int, arg1: int) -> None:
        ...
    
    def setResizeThumbnail(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> None:
        ...
    
    def setWaitForConfigInput(self, wait: bool) -> None:
        ...
    
    @overload
    def setWarpMesh(self, arg0: List[depthai.Point2f], arg1: int, arg2: int) -> None:
        ...
    
    @overload
    def setWarpMesh(self, arg0: List[Tuple[float, float]], arg1: int, arg2: int) -> None:
        ...
    
    @property
    def initialConfig(self) -> depthai.ImageManipConfig:
        ...
    
    @property
    def inputConfig(self) -> depthai.Node.Input:
        ...
    
    @property
    def inputImage(self) -> depthai.Node.Input:
        ...
    
    @property
    def out(self) -> depthai.Node.Output:
        ...
    


class MobileNetDetectionNetwork(DetectionNetwork):
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileNetSpatialDetectionNetwork(SpatialDetectionNetwork):
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MonoCamera(depthai.Node):
    class Properties:
        class SensorResolution:
            __members__: ClassVar[dict] = ...
            THE_1200_P: ClassVar[depthai.MonoCameraProperties.SensorResolution] = ...
            THE_400_P: ClassVar[depthai.MonoCameraProperties.SensorResolution] = ...
            THE_480_P: ClassVar[depthai.MonoCameraProperties.SensorResolution] = ...
            THE_720_P: ClassVar[depthai.MonoCameraProperties.SensorResolution] = ...
            THE_800_P: ClassVar[depthai.MonoCameraProperties.SensorResolution] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        boardSocket: depthai.CameraBoardSocket
        eventFilter: List[depthai.FrameEvent]
        fps: float
        initialControl: depthai.RawCameraControl
        isp3aFps: int
        numFramesPool: int
        numFramesPoolRaw: int
        resolution: depthai.MonoCameraProperties.SensorResolution
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getBoardSocket(self) -> depthai.CameraBoardSocket:
        ...
    
    def getCamId(self) -> int:
        ...
    
    def getCamera(self) -> str:
        ...
    
    def getFps(self) -> float:
        ...
    
    def getFrameEventFilter(self) -> List[depthai.FrameEvent]:
        ...
    
    def getImageOrientation(self) -> depthai.CameraImageOrientation:
        ...
    
    def getNumFramesPool(self) -> int:
        ...
    
    def getRawNumFramesPool(self) -> int:
        ...
    
    def getResolution(self) -> depthai.MonoCameraProperties.SensorResolution:
        ...
    
    def getResolutionHeight(self) -> int:
        ...
    
    def getResolutionSize(self) -> Tuple[int, int]:
        ...
    
    def getResolutionWidth(self) -> int:
        ...
    
    def setBoardSocket(self, boardSocket: depthai.CameraBoardSocket) -> None:
        ...
    
    def setCamId(self, arg0: int) -> None:
        ...
    
    def setCamera(self, name: str) -> None:
        ...
    
    def setFps(self, fps: float) -> None:
        ...
    
    def setFrameEventFilter(self, events: List[depthai.FrameEvent]) -> None:
        ...
    
    def setImageOrientation(self, imageOrientation: depthai.CameraImageOrientation) -> None:
        ...
    
    def setIsp3aFps(self, arg0: int) -> None:
        ...
    
    def setNumFramesPool(self, arg0: int) -> None:
        ...
    
    def setRawNumFramesPool(self, arg0: int) -> None:
        ...
    
    def setRawOutputPacked(self, packed: bool) -> None:
        ...
    
    def setResolution(self, resolution: depthai.MonoCameraProperties.SensorResolution) -> None:
        ...
    
    @property
    def frameEvent(self) -> depthai.Node.Output:
        ...
    
    @property
    def initialControl(self) -> depthai.CameraControl:
        ...
    
    @property
    def inputControl(self) -> depthai.Node.Input:
        ...
    
    @property
    def out(self) -> depthai.Node.Output:
        ...
    
    @property
    def raw(self) -> depthai.Node.Output:
        ...
    


class NeuralNetwork(depthai.Node):
    class Properties:
        blobSize: Optional[int]
        blobUri: str
        numFrames: int
        numNCEPerThread: int
        numThreads: int
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getNumInferenceThreads(self) -> int:
        ...
    
    @overload
    def setBlob(self, blob: depthai.OpenVINO.Blob) -> None:
        ...
    
    @overload
    def setBlob(self, path: Path) -> None:
        ...
    
    def setBlobPath(self, path: Path) -> None:
        ...
    
    def setNumInferenceThreads(self, numThreads: int) -> None:
        ...
    
    def setNumNCEPerInferenceThread(self, numNCEPerThread: int) -> None:
        ...
    
    def setNumPoolFrames(self, numFrames: int) -> None:
        ...
    
    @property
    def input(self) -> depthai.Node.Input:
        ...
    
    @property
    def inputs(self) -> depthai.Node.InputMap:
        ...
    
    @property
    def out(self) -> depthai.Node.Output:
        ...
    
    @property
    def passthrough(self) -> depthai.Node.Output:
        ...
    
    @property
    def passthroughs(self) -> depthai.Node.OutputMap:
        ...
    


class ObjectTracker(depthai.Node):
    class Properties:
        detectionLabelsToTrack: List[int]
        maxObjectsToTrack: int
        trackerIdAssignmentPolicy: depthai.TrackerIdAssignmentPolicy
        trackerThreshold: float
        trackerType: depthai.TrackerType
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def setDetectionLabelsToTrack(self, labels: List[int]) -> None:
        ...
    
    def setMaxObjectsToTrack(self, maxObjectsToTrack: int) -> None:
        ...
    
    def setTrackerIdAssignmentPolicy(self, type: depthai.TrackerIdAssignmentPolicy) -> None:
        ...
    
    def setTrackerThreshold(self, threshold: float) -> None:
        ...
    
    def setTrackerType(self, type: depthai.TrackerType) -> None:
        ...
    
    def setTrackingPerClass(self, trackingPerClass: bool) -> None:
        ...
    
    @property
    def inputDetectionFrame(self) -> depthai.Node.Input:
        ...
    
    @property
    def inputDetections(self) -> depthai.Node.Input:
        ...
    
    @property
    def inputTrackerFrame(self) -> depthai.Node.Input:
        ...
    
    @property
    def out(self) -> depthai.Node.Output:
        ...
    
    @property
    def passthroughDetectionFrame(self) -> depthai.Node.Output:
        ...
    
    @property
    def passthroughDetections(self) -> depthai.Node.Output:
        ...
    
    @property
    def passthroughTrackerFrame(self) -> depthai.Node.Output:
        ...
    


class SPIIn(depthai.Node):
    class Properties:
        busId: int
        maxDataSize: int
        numFrames: int
        streamName: str
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getBusId(self) -> int:
        ...
    
    def getMaxDataSize(self) -> int:
        ...
    
    def getNumFrames(self) -> int:
        ...
    
    def getStreamName(self) -> str:
        ...
    
    def setBusId(self, id: int) -> None:
        ...
    
    def setMaxDataSize(self, maxDataSize: int) -> None:
        ...
    
    def setNumFrames(self, numFrames: int) -> None:
        ...
    
    def setStreamName(self, name: str) -> None:
        ...
    
    @property
    def out(self) -> depthai.Node.Output:
        ...
    


class SPIOut(depthai.Node):
    class Properties:
        busId: int
        streamName: str
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def setBusId(self, id: int) -> None:
        ...
    
    def setStreamName(self, name: str) -> None:
        ...
    
    @property
    def input(self) -> depthai.Node.Input:
        ...
    


class Script(depthai.Node):
    class Properties:
        processor: depthai.ProcessorType
        scriptName: str
        scriptUri: str
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getProcessor(self) -> depthai.ProcessorType:
        ...
    
    def getScriptName(self) -> str:
        ...
    
    def setProcessor(self, arg0: depthai.ProcessorType) -> None:
        ...
    
    @overload
    def setScript(self, script: str, name: str = ...) -> None:
        ...
    
    @overload
    def setScript(self, data: List[int], name: str = ...) -> None:
        ...
    
    @overload
    def setScriptPath(self, arg0: Path, arg1: str) -> None:
        ...
    
    @overload
    def setScriptPath(self, path: Path, name: str = ...) -> None:
        ...
    
    @property
    def inputs(self) -> depthai.Node.InputMap:
        ...
    
    @property
    def outputs(self) -> depthai.Node.OutputMap:
        ...
    


class SpatialDetectionNetwork(DetectionNetwork):
    class Properties(depthai.DetectionNetworkProperties):
        depthThresholds: depthai.SpatialLocationCalculatorConfigThresholds
        detectedBBScaleFactor: float
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def setBoundingBoxScaleFactor(self, scaleFactor: float) -> None:
        ...
    
    def setDepthLowerThreshold(self, lowerThreshold: int) -> None:
        ...
    
    def setDepthUpperThreshold(self, upperThreshold: int) -> None:
        ...
    
    def setSpatialCalculationAlgorithm(self, calculationAlgorithm: depthai.SpatialLocationCalculatorAlgorithm) -> None:
        ...
    
    def setSpatialCalculationStepSize(self, stepSize: int) -> None:
        ...
    
    @property
    def boundingBoxMapping(self) -> depthai.Node.Output:
        ...
    
    @property
    def input(self) -> depthai.Node.Input:
        ...
    
    @property
    def inputDepth(self) -> depthai.Node.Input:
        ...
    
    @property
    def out(self) -> depthai.Node.Output:
        ...
    
    @property
    def passthrough(self) -> depthai.Node.Output:
        ...
    
    @property
    def passthroughDepth(self) -> depthai.Node.Output:
        ...
    
    @property
    def spatialLocationCalculatorOutput(self) -> depthai.Node.Output:
        ...
    


class SpatialLocationCalculator(depthai.Node):
    class Properties:
        roiConfig: Any
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getWaitForConfigInput(self) -> bool:
        ...
    
    def setWaitForConfigInput(self, wait: bool) -> None:
        ...
    
    @property
    def initialConfig(self) -> depthai.SpatialLocationCalculatorConfig:
        ...
    
    @property
    def inputConfig(self) -> depthai.Node.Input:
        ...
    
    @property
    def inputDepth(self) -> depthai.Node.Input:
        ...
    
    @property
    def out(self) -> depthai.Node.Output:
        ...
    
    @property
    def passthroughDepth(self) -> depthai.Node.Output:
        ...
    


class StereoDepth(depthai.Node):
    class PresetMode:
        __members__: ClassVar[dict] = ...
        HIGH_ACCURACY: ClassVar[StereoDepth.PresetMode] = ...
        HIGH_DENSITY: ClassVar[StereoDepth.PresetMode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None:
            ...
        
        def __eq__(self, other: object) -> bool:
            ...
        
        def __getstate__(self) -> int:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __index__(self) -> int:
            ...
        
        def __int__(self) -> int:
            ...
        
        def __ne__(self, other: object) -> bool:
            ...
        
        def __setstate__(self, state: int) -> None:
            ...
        
        @property
        def name(self) -> str:
            ...
        
        @property
        def value(self) -> int:
            ...
        
    
    
    class Properties:
        class DepthAlign:
            __members__: ClassVar[dict] = ...
            CENTER: ClassVar[depthai.RawStereoDepthConfig.AlgorithmControl.DepthAlign] = ...
            RECTIFIED_LEFT: ClassVar[depthai.RawStereoDepthConfig.AlgorithmControl.DepthAlign] = ...
            RECTIFIED_RIGHT: ClassVar[depthai.RawStereoDepthConfig.AlgorithmControl.DepthAlign] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        class MedianFilter:
            __members__: ClassVar[dict] = ...
            KERNEL_3x3: ClassVar[depthai.MedianFilter] = ...
            KERNEL_5x5: ClassVar[depthai.MedianFilter] = ...
            KERNEL_7x7: ClassVar[depthai.MedianFilter] = ...
            MEDIAN_OFF: ClassVar[depthai.MedianFilter] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        class RectificationMesh:
            meshLeftUri: str
            meshRightUri: str
            meshSize: Optional[int]
            stepHeight: int
            stepWidth: int
            def __init__(self, *args, **kwargs) -> None:
                ...
            
        
        
        alphaScaling: Optional[float]
        baseline: Optional[float]
        depthAlignCamera: depthai.CameraBoardSocket
        depthAlignmentUseSpecTranslation: bool
        disparityToDepthUseSpecTranslation: bool
        enableRectification: bool
        enableRuntimeStereoModeSwitch: bool
        focalLength: Optional[float]
        focalLengthFromCalibration: bool
        height: Optional[int]
        initialConfig: depthai.RawStereoDepthConfig
        mesh: depthai.StereoDepthProperties.RectificationMesh
        numFramesPool: int
        numPostProcessingMemorySlices: int
        numPostProcessingShaves: int
        outHeight: Optional[int]
        outKeepAspectRatio: bool
        outWidth: Optional[int]
        rectificationUseSpecTranslation: bool
        rectifyEdgeFillColor: int
        useHomographyRectification: Optional[bool]
        width: Optional[int]
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def enableDistortionCorrection(self, arg0: bool) -> None:
        ...
    
    def getMaxDisparity(self) -> float:
        ...
    
    def loadMeshData(self, dataLeft: List[int], dataRight: List[int]) -> None:
        ...
    
    def loadMeshFiles(self, pathLeft: Path, pathRight: Path) -> None:
        ...
    
    def setAlphaScaling(self, arg0: float) -> None:
        ...
    
    def setBaseline(self, arg0: float) -> None:
        ...
    
    def setConfidenceThreshold(self, arg0: int) -> None:
        ...
    
    def setDefaultProfilePreset(self, arg0: StereoDepth.PresetMode) -> None:
        ...
    
    @overload
    def setDepthAlign(self, align: depthai.RawStereoDepthConfig.AlgorithmControl.DepthAlign) -> None:
        ...
    
    @overload
    def setDepthAlign(self, camera: depthai.CameraBoardSocket) -> None:
        ...
    
    def setDepthAlignmentUseSpecTranslation(self, arg0: bool) -> None:
        ...
    
    def setDisparityToDepthUseSpecTranslation(self, arg0: bool) -> None:
        ...
    
    def setEmptyCalibration(self) -> None:
        ...
    
    def setExtendedDisparity(self, enable: bool) -> None:
        ...
    
    def setFocalLength(self, arg0: float) -> None:
        ...
    
    def setFocalLengthFromCalibration(self, arg0: bool) -> None:
        ...
    
    @overload
    def setInputResolution(self, width: int, height: int) -> None:
        ...
    
    @overload
    def setInputResolution(self, resolution: Tuple[int, int]) -> None:
        ...
    
    def setLeftRightCheck(self, enable: bool) -> None:
        ...
    
    def setMedianFilter(self, arg0: depthai.MedianFilter) -> None:
        ...
    
    def setMeshStep(self, width: int, height: int) -> None:
        ...
    
    def setNumFramesPool(self, arg0: int) -> None:
        ...
    
    def setOutputDepth(self, arg0: bool) -> None:
        ...
    
    def setOutputKeepAspectRatio(self, keep: bool) -> None:
        ...
    
    def setOutputRectified(self, arg0: bool) -> None:
        ...
    
    def setOutputSize(self, width: int, height: int) -> None:
        ...
    
    def setPostProcessingHardwareResources(self, arg0: int, arg1: int) -> None:
        ...
    
    def setRectification(self, enable: bool) -> None:
        ...
    
    def setRectificationUseSpecTranslation(self, arg0: bool) -> None:
        ...
    
    def setRectifyEdgeFillColor(self, color: int) -> None:
        ...
    
    def setRectifyMirrorFrame(self, arg0: bool) -> None:
        ...
    
    def setRuntimeModeSwitch(self, arg0: bool) -> None:
        ...
    
    def setSubpixel(self, enable: bool) -> None:
        ...
    
    def setSubpixelFractionalBits(self, subpixelFractionalBits: int) -> None:
        ...
    
    def useHomographyRectification(self, arg0: bool) -> None:
        ...
    
    @property
    def confidenceMap(self) -> depthai.Node.Output:
        ...
    
    @property
    def debugDispCostDump(self) -> depthai.Node.Output:
        ...
    
    @property
    def debugDispLrCheckIt1(self) -> depthai.Node.Output:
        ...
    
    @property
    def debugDispLrCheckIt2(self) -> depthai.Node.Output:
        ...
    
    @property
    def debugExtDispLrCheckIt1(self) -> depthai.Node.Output:
        ...
    
    @property
    def debugExtDispLrCheckIt2(self) -> depthai.Node.Output:
        ...
    
    @property
    def depth(self) -> depthai.Node.Output:
        ...
    
    @property
    def disparity(self) -> depthai.Node.Output:
        ...
    
    @property
    def initialConfig(self) -> depthai.StereoDepthConfig:
        ...
    
    @property
    def inputConfig(self) -> depthai.Node.Input:
        ...
    
    @property
    def left(self) -> depthai.Node.Input:
        ...
    
    @property
    def outConfig(self) -> depthai.Node.Output:
        ...
    
    @property
    def rectifiedLeft(self) -> depthai.Node.Output:
        ...
    
    @property
    def rectifiedRight(self) -> depthai.Node.Output:
        ...
    
    @property
    def right(self) -> depthai.Node.Input:
        ...
    
    @property
    def syncedLeft(self) -> depthai.Node.Output:
        ...
    
    @property
    def syncedRight(self) -> depthai.Node.Output:
        ...
    


class SystemLogger(depthai.Node):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getRate(self) -> float:
        ...
    
    def setRate(self, hz: float) -> None:
        ...
    
    @property
    def out(self) -> depthai.Node.Output:
        ...
    


class ToF(depthai.Node):
    class Properties:
        initialConfig: depthai.RawToFConfig
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @property
    def amplitude(self) -> depthai.Node.Output:
        ...
    
    @property
    def depth(self) -> depthai.Node.Output:
        ...
    
    @property
    def error(self) -> depthai.Node.Output:
        ...
    
    @property
    def initialConfig(self) -> depthai.ToFConfig:
        ...
    
    @property
    def input(self) -> depthai.Node.Input:
        ...
    
    @property
    def inputConfig(self) -> depthai.Node.Input:
        ...
    


class UVC(depthai.Node):
    class Properties:
        gpioInit: Dict[int, int]
        gpioStreamOff: Dict[int, int]
        gpioStreamOn: Dict[int, int]
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, USBVideoClass) -> Any:
        ...
    
    def setGpiosOnInit(self, list: Dict[int, int]) -> None:
        ...
    
    def setGpiosOnStreamOff(self, list: Dict[int, int]) -> None:
        ...
    
    def setGpiosOnStreamOn(self, list: Dict[int, int]) -> None:
        ...
    
    @property
    def input(self) -> depthai.Node.Input:
        ...
    


class VideoEncoder(depthai.Node):
    class Properties:
        class Profile:
            __members__: ClassVar[dict] = ...
            H264_BASELINE: ClassVar[depthai.VideoEncoderProperties.Profile] = ...
            H264_HIGH: ClassVar[depthai.VideoEncoderProperties.Profile] = ...
            H264_MAIN: ClassVar[depthai.VideoEncoderProperties.Profile] = ...
            H265_MAIN: ClassVar[depthai.VideoEncoderProperties.Profile] = ...
            MJPEG: ClassVar[depthai.VideoEncoderProperties.Profile] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        class RateControlMode:
            __members__: ClassVar[dict] = ...
            CBR: ClassVar[depthai.VideoEncoderProperties.RateControlMode] = ...
            VBR: ClassVar[depthai.VideoEncoderProperties.RateControlMode] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        bitrate: int
        keyframeFrequency: int
        maxBitrate: int
        numBFrames: int
        numFramesPool: int
        outputFrameSize: int
        profile: depthai.VideoEncoderProperties.Profile
        quality: int
        rateCtrlMode: depthai.VideoEncoderProperties.RateControlMode
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getBitrate(self) -> int:
        ...
    
    def getBitrateKbps(self) -> int:
        ...
    
    def getFrameRate(self) -> float:
        ...
    
    def getHeight(self) -> int:
        ...
    
    def getKeyframeFrequency(self) -> int:
        ...
    
    def getLossless(self) -> bool:
        ...
    
    def getMaxOutputFrameSize(self) -> int:
        ...
    
    def getNumBFrames(self) -> int:
        ...
    
    def getNumFramesPool(self) -> int:
        ...
    
    def getProfile(self) -> depthai.VideoEncoderProperties.Profile:
        ...
    
    def getQuality(self) -> int:
        ...
    
    def getRateControlMode(self) -> depthai.VideoEncoderProperties.RateControlMode:
        ...
    
    def getSize(self) -> Tuple[int, int]:
        ...
    
    def getWidth(self) -> int:
        ...
    
    def setBitrate(self, bitrate: int) -> None:
        ...
    
    def setBitrateKbps(self, bitrateKbps: int) -> None:
        ...
    
    @overload
    def setDefaultProfilePreset(self, fps: float, profile: depthai.VideoEncoderProperties.Profile) -> None:
        ...
    
    @overload
    def setDefaultProfilePreset(self, arg0: int, arg1: int, arg2: float, arg3: depthai.VideoEncoderProperties.Profile) -> None:
        ...
    
    @overload
    def setDefaultProfilePreset(self, arg0: Tuple[int, int], arg1: float, arg2: depthai.VideoEncoderProperties.Profile) -> None:
        ...
    
    def setFrameRate(self, frameRate: float) -> None:
        ...
    
    def setKeyframeFrequency(self, freq: int) -> None:
        ...
    
    def setLossless(self, arg0: bool) -> None:
        ...
    
    def setMaxOutputFrameSize(self, maxFrameSize: int) -> None:
        ...
    
    def setNumBFrames(self, numBFrames: int) -> None:
        ...
    
    def setNumFramesPool(self, frames: int) -> None:
        ...
    
    @overload
    def setProfile(self, profile: depthai.VideoEncoderProperties.Profile) -> None:
        ...
    
    @overload
    def setProfile(self, arg0: Tuple[int, int], arg1: depthai.VideoEncoderProperties.Profile) -> None:
        ...
    
    @overload
    def setProfile(self, arg0: int, arg1: int, arg2: depthai.VideoEncoderProperties.Profile) -> None:
        ...
    
    def setQuality(self, quality: int) -> None:
        ...
    
    def setRateControlMode(self, mode: depthai.VideoEncoderProperties.RateControlMode) -> None:
        ...
    
    @property
    def bitstream(self) -> depthai.Node.Output:
        ...
    
    @property
    def input(self) -> depthai.Node.Input:
        ...
    


class Warp(depthai.Node):
    class Properties:
        class Interpolation:
            __members__: ClassVar[dict] = ...
            BICUBIC: ClassVar[depthai.WarpProperties.Interpolation] = ...
            BILINEAR: ClassVar[depthai.WarpProperties.Interpolation] = ...
            BYPASS: ClassVar[depthai.WarpProperties.Interpolation] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None:
                ...
            
            def __eq__(self, other: object) -> bool:
                ...
            
            def __getstate__(self) -> int:
                ...
            
            def __hash__(self) -> int:
                ...
            
            def __index__(self) -> int:
                ...
            
            def __int__(self) -> int:
                ...
            
            def __ne__(self, other: object) -> bool:
                ...
            
            def __setstate__(self, state: int) -> None:
                ...
            
            @property
            def name(self) -> str:
                ...
            
            @property
            def value(self) -> int:
                ...
            
        
        
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getHwIds(self) -> List[int]:
        ...
    
    def getInterpolation(self) -> depthai.WarpProperties.Interpolation:
        ...
    
    def setHwIds(self, arg0: List[int]) -> None:
        ...
    
    def setInterpolation(self, arg0: depthai.WarpProperties.Interpolation) -> None:
        ...
    
    def setMaxOutputFrameSize(self, arg0: int) -> None:
        ...
    
    def setNumFramesPool(self, arg0: int) -> None:
        ...
    
    @overload
    def setOutputSize(self, arg0: int, arg1: int) -> None:
        ...
    
    @overload
    def setOutputSize(self, arg0: Tuple[int, int]) -> None:
        ...
    
    @overload
    def setWarpMesh(self, arg0: List[depthai.Point2f], arg1: int, arg2: int) -> None:
        ...
    
    @overload
    def setWarpMesh(self, arg0: List[Tuple[float, float]], arg1: int, arg2: int) -> None:
        ...
    
    @property
    def inputImage(self) -> depthai.Node.Input:
        ...
    
    @property
    def out(self) -> depthai.Node.Output:
        ...
    


class XLinkIn(depthai.Node):
    class Properties:
        maxDataSize: int
        numFrames: int
        streamName: str
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getMaxDataSize(self) -> int:
        ...
    
    def getNumFrames(self) -> int:
        ...
    
    def getStreamName(self) -> str:
        ...
    
    def setMaxDataSize(self, maxDataSize: int) -> None:
        ...
    
    def setNumFrames(self, numFrames: int) -> None:
        ...
    
    def setStreamName(self, streamName: str) -> None:
        ...
    
    @property
    def out(self) -> depthai.Node.Output:
        ...
    


class XLinkOut(depthai.Node):
    class Properties:
        maxFpsLimit: float
        metadataOnly: bool
        streamName: str
        def __init__(self, *args, **kwargs) -> None:
            ...
        
    
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getFpsLimit(self) -> float:
        ...
    
    def getMetadataOnly(self) -> bool:
        ...
    
    def getStreamName(self) -> str:
        ...
    
    def setFpsLimit(self, fpsLimit: float) -> None:
        ...
    
    def setMetadataOnly(self, arg0: bool) -> None:
        ...
    
    def setStreamName(self, streamName: str) -> None:
        ...
    
    @property
    def input(self) -> depthai.Node.Input:
        ...
    


class YoloDetectionNetwork(DetectionNetwork):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getAnchorMasks(self) -> Dict[str, List[int]]:
        ...
    
    def getAnchors(self) -> List[float]:
        ...
    
    def getCoordinateSize(self) -> int:
        ...
    
    def getIouThreshold(self) -> float:
        ...
    
    def getNumClasses(self) -> int:
        ...
    
    def setAnchorMasks(self, anchorMasks: Dict[str, List[int]]) -> None:
        ...
    
    def setAnchors(self, anchors: List[float]) -> None:
        ...
    
    def setCoordinateSize(self, coordinates: int) -> None:
        ...
    
    def setIouThreshold(self, thresh: float) -> None:
        ...
    
    def setNumClasses(self, numClasses: int) -> None:
        ...
    


class YoloSpatialDetectionNetwork(SpatialDetectionNetwork):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getAnchorMasks(self) -> Dict[str, List[int]]:
        ...
    
    def getAnchors(self) -> List[float]:
        ...
    
    def getCoordinateSize(self) -> int:
        ...
    
    def getIouThreshold(self) -> float:
        ...
    
    def getNumClasses(self) -> int:
        ...
    
    def setAnchorMasks(self, anchorMasks: Dict[str, List[int]]) -> None:
        ...
    
    def setAnchors(self, anchors: List[float]) -> None:
        ...
    
    def setCoordinateSize(self, coordinates: int) -> None:
        ...
    
    def setIouThreshold(self, thresh: float) -> None:
        ...
    
    def setNumClasses(self, numClasses: int) -> None:
        ...
    


