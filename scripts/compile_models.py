import itertools
import os
import shutil

from oakutils.blobs import compile
from oakutils.blobs.definitions import AbstractModel, ModelType, InputType
from oakutils.blobs.definitions import (
    Gaussian,
    GaussianGray,
    GaussianLaplacian,
    GaussianLaplacianGray,
    Laplacian,
    LaplacianGray,
    LaplacianBlur,
    LaplacianBlurGray,
    Sobel,
    SobelBlur,
    PointCloud,
)


def delete_folder(folder_path: str):
    if not os.path.exists(folder_path):
        return
    for root, dirs, files in os.walk(folder_path):
        for f in files:
            os.unlink(os.path.join(root, f))
        for d in dirs:
            shutil.rmtree(os.path.join(root, d))
    os.rmdir(folder_path)


def compile_model(model_type: AbstractModel):
    model_args = {}
    kernel_size_list = [3, 5, 7, 9, 11, 13, 15]
    arg_mapping = {
        ModelType.NONE: {},
        ModelType.KERNEL: {"kernel_size": kernel_size_list},
        ModelType.DUAL_KERNEL: {
            "kernel_size": kernel_size_list,
            "kernel_size2": kernel_size_list,
        },
    }
    if model_type.model_type() == ModelType.NONE:
        model_args = [{}]
    elif model_type.model_type() == ModelType.KERNEL:
        kernel_list = arg_mapping[model_type.model_type()]["kernel_size"]
        model_args = [{"kernel_size": t} for t in kernel_list]
    elif model_type.model_type() == ModelType.DUAL_KERNEL:
        kernel_list = arg_mapping[model_type.model_type()]["kernel_size"]
        kernel_list2 = arg_mapping[model_type.model_type()]["kernel_size2"]
        model_args = [
            {"kernel_size": t1, "kernel_size2": t2}
            for t1, t2 in itertools.product(
                kernel_list,
                kernel_list2,
            )
        ]
    else:
        raise RuntimeError("Unknown model type")

    model_paths = []
    for model_arg in model_args:
        print(f"Compiling {model_type.__name__} with args {model_arg}")
        model_path = compile(
            model_type,
            model_arg,
        )
        model_paths.append(model_path)

    for model_path in model_paths:
        shutil.copy(model_path, os.path.join(MODEL_FOLDER, os.path.basename(model_path)))


def compiles_models():
    models = [
        Gaussian,
        GaussianGray,
        GaussianLaplacian,
        GaussianLaplacianGray,
        Laplacian,
        LaplacianGray,
        LaplacianBlur,
        LaplacianBlurGray,
        Sobel,
        SobelBlur,
        PointCloud,
    ]
    for model in models:
        compile_model(model)

    # handle writing the __init__.py file
    var_names = []
    init_final_path = os.path.join(MODEL_FOLDER, "__init__.py")
    with open(init_final_path, "w") as f:
        # add big comment saying this is an auto-generated file
        f.write("# This file is auto-generated by scripts/compile_models.py\n\n")

        # handle imports first
        # f.write("import abc\n")
        f.write("import os\n")
        f.write("import sysconfig\n\n")

        # get the path to the blob folder
        f.write(f"_RELATIVE_BLOB_FOLDER = os.path.join('oakutils', 'blobs')\n")

        # get the site packages path
        f.write("_SITE_PACKAGES = sysconfig.get_paths()['purelib']\n")

        # get the path to the blob folder
        f.write(f"_BLOB_FOLDER = os.path.join(_SITE_PACKAGES, _RELATIVE_BLOB_FOLDER)\n")

        # add a space
        f.write("\n")

        # # create the meta class definition
        # f.write("class _Blob(str):\n")
        # f.write("    __metaclass__ = abc.ABCMeta\n\n")
        # write the model names
        model_names = os.listdir(MODEL_FOLDER)
        for model_name in model_names:
            if model_name == "__init__.py":
                continue
            var_name = model_name.upper().split(".")[0]
            # drop the first character since it is an underscore
            var_name = var_name[1:]
            var_names.append(var_name)
            f.write(f"{var_name} = os.path.abspath(os.path.join(_BLOB_FOLDER, '{model_name}'))\n")
            # f.write(f"{var_name} = _Blob(os.path.abspath(os.path.join(_BLOB_FOLDER, '{model_name}')))\n")
            # f.write(f"{var_name}.__doc__ = 'Absolute file path for {model_name} file'\n")

        # create the attributes section docstring in numpy format
        f.write("\n")
        f.write("'''\n")
        f.write("Note\n")
        f.write("-----\n")
        f.write("This module is auto-generated\n")
        f.write("Attributes\n")
        f.write("----------\n")
        for var_name in var_names:
            f.write(f"{var_name} : str\n")
            f.write(f"    Absolute file path for {var_name} file\n")
        f.write("'''\n")

        # write the __all__ variable
        f.write("\n__all__ = [\n")
        for var_name in var_names:
            f.write(f"    '{var_name}',\n")
        f.write("]\n")


def main():
    compiles_models()


if __name__ == "__main__":
    SCRIPT_PATH = os.path.realpath(os.path.dirname(__file__))
    MODEL_FOLDER = os.path.join(SCRIPT_PATH, "..", "src", "oakutils", "blobs", "models")
    main()
