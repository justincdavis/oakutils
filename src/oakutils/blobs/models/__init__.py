# Copyright (c) 2024 Justin Davis (davisjustin302@gmail.com)
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

# =============================================================================
# This file is auto-generated by scripts/compile_models.py
# =============================================================================

"""
Module for compiled models.

Note:
----
This module is auto-generated

Attributes:
----------
shave1 : module
    Contains all the models compiled for 1 shaves
shave2 : module
    Contains all the models compiled for 2 shaves
shave3 : module
    Contains all the models compiled for 3 shaves
shave4 : module
    Contains all the models compiled for 4 shaves
shave5 : module
    Contains all the models compiled for 5 shaves
shave6 : module
    Contains all the models compiled for 6 shaves

"""
from __future__ import annotations

import importlib
import sys
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from types import ModuleType

_submodules = [
    "shave1",
    "shave2",
    "shave3",
    "shave4",
    "shave5",
    "shave6",
]

_loaded_modules: dict[str, ModuleType | None] = {
    "shave1": None,
    "shave2": None,
    "shave3": None,
    "shave4": None,
    "shave5": None,
    "shave6": None,
}


def __getattr__(name: str) -> ModuleType:
    if name in _submodules:
        _loaded_modules[name] = importlib.import_module(f"{__name__}.{name}")
        # setattr(sys.modules[__name__], name, _loaded_modules[name])
        module = _loaded_modules[name]
        if module is None:
            err_msg = f"Could not import module {name}"
            raise ImportError(err_msg)
        return module
    err_msg = f"module {__name__} has no attribute {name}"
    raise AttributeError(err_msg)


def __dir__() -> list[str]:
    module_attrs = list(object.__dir__(sys.modules[__name__]))
    return list(set(module_attrs + _submodules))


__all__ = [
    "shave1",
    "shave2",
    "shave3",
    "shave4",
    "shave5",
    "shave6",
]
