from dataclasses import dataclass
from typing import Optional, Tuple

import numpy as np
import open3d as o3d


@dataclass
class MonoCalibrationData:
    """
    Class to store calibration data for a mono camera.

    :param size: Image size.
    :type size: Tuple[int, int]
    :param K: Camera matrix.
    :type K: np.ndarray
    :param D: Distortion coefficients.
    :type D: np.ndarray
    :param fx: Focal length in x.
    :type fx: float
    :param fy: Focal length in y.
    :type fy: float
    :param cx: Principal point in x.
    :type cx: float
    :param cy: Principal point in y.
    :type cy: float
    :param fov: Field of view.
    :type fov: float
    :param R: Rotation matrix.
    :type R: np.ndarray
    :param T: Translation matrix.
    :type T: np.ndarray
    :param H: Homography matrix.
    :type H: np.ndarray
    :param valid_region: Valid region of the calibration generated by cv2.stereoRectify (optional).
    :type valid_region: Optional[Tuple[int, int, int, int]]
    :param map_1: Map 1 for undistortion generated by cv2.initUndistortRectifyMap (optional).
    :type map_1: Optional[np.ndarray]
    :param map_2: Map 2 for undistortion generated by cv2.initUndistortRectifyMap (optional).
    :type map_2: Optional[np.ndarray]
    :param pinhole: Open3D pinhole camera intrinsic (optional).
    :type pinhole: Optional[o3d.camera.PinholeCameraIntrinsic]
    """

    size: Tuple[int, int]
    K: np.ndarray
    D: np.ndarray
    fx: float
    fy: float
    cx: float
    cy: float
    fov: float
    R: np.ndarray
    T: np.ndarray
    H: np.ndarray
    valid_region: Optional[Tuple[int, int, int, int]] = None
    map_1: Optional[np.ndarray] = None
    map_2: Optional[np.ndarray] = None
    pinhole: Optional[o3d.camera.PinholeCameraIntrinsic] = None


@dataclass
class StereoCalibrationData:
    """
    Class to store calibration data for stereo cameras.

    :param left: Left camera calibration data.
    :type left: MonoCalibrationData
    :param right: Right camera calibration data.
    :type right: MonoCalibrationData
    :param R1: Rectification transform for the left camera.
    :type R1: np.ndarray
    :param R2: Rectification transform for the right camera.
    :type R2: np.ndarray
    :param T1: Projection matrix for the left camera.
    :type T1: np.ndarray
    :param T2: Projection matrix for the right camera.
    :type T2: np.ndarray
    :param H_left: Homography matrix for the left camera.
    :type H_left: np.ndarray
    :param H_right: Homography matrix for the right camera.
    :type H_right: np.ndarray
    :param l2r_extrinsic: Extrinsic matrix from the left to the right camera.
    :type l2r_extrinsic: np.ndarray
    :param r2l_extrinsic: Extrinsic matrix from the right to the left camera.
    :type r2l_extrinsic: np.ndarray
    :param Q_left: Q matrix for the left camera.
    :type Q_left: np.ndarray
    :param Q_right: Q matrix for the right camera.
    :type Q_right: np.ndarray
    :param baseline: Baseline between the two cameras (in meters).
    :type baseline: float
    :param primary: Primary camera calibration data (optional).
    :type primary: Optional[MonoCalibrationData]
    :param Q_primary: Q matrix for the primary camera (optional).
    :type Q_primary: Optional[np.ndarray]
    :param cv2_Q: Q matrix generated by cv2.stereoRectify (optional).
    :type cv2_Q: Optional[np.ndarray]
    :param cv2_R1: R1 matrix generated by cv2.stereoRectify (optional).
    :type cv2_R1: Optional[np.ndarray]
    :param cv2_R2: R2 matrix generated by cv2.stereoRectify (optional).
    :type cv2_R2: Optional[np.ndarray]
    :param P1: P1 matrix generated by cv2.stereoRectify (optional).
    :type P1: Optional[np.ndarray]
    :param P2: P2 matrix generated by cv2.stereoRectify (optional).
    :type P2: Optional[np.ndarray]
    :param valid_region_primary: Valid region of the primary camera (optional).
    :type valid_region_primary: Optional[Tuple[int, int, int, int]]
    :param pinhole_primary: Open3D pinhole camera intrinsic for the primary camera (optional).
    :type pinhole_primary: Optional[o3d.camera.PinholeCameraIntrinsic]
    """

    left: MonoCalibrationData
    right: MonoCalibrationData
    R1: np.ndarray
    R2: np.ndarray
    T1: np.ndarray
    T2: np.ndarray
    H_left: np.ndarray
    H_right: np.ndarray
    l2r_extrinsic: np.ndarray
    r2l_extrinsic: np.ndarray
    Q_left: np.ndarray
    Q_right: np.ndarray
    baseline: float
    primary: Optional[MonoCalibrationData] = None
    Q_primary: Optional[np.ndarray] = None
    cv2_Q: Optional[np.ndarray] = None
    cv2_R1: Optional[np.ndarray] = None
    cv2_R2: Optional[np.ndarray] = None
    P1: Optional[np.ndarray] = None
    P2: Optional[np.ndarray] = None
    valid_region_primary: Optional[Tuple[int, int, int, int]] = None
    pinhole_primary: Optional[o3d.camera.PinholeCameraIntrinsic] = None


@dataclass
class ColorCalibrationData:
    """
    Class to store calibration data for a color camera.

    :param size: Image size.
    :type size: Tuple[int, int]
    :param K: Camera matrix.
    :type K: np.ndarray
    :param D: Distortion coefficients.
    :type D: np.ndarray
    :param fx: Focal length in the x direction.
    :type fx: float
    :param fy: Focal length in the y direction.
    :type fy: float
    :param cx: Principal point in the x direction.
    :type cx: float
    :param cy: Principal point in the y direction.
    :type cy: float
    :param fov: Field of view.
    :type fov: float
    :param P: Projection matrix (optional).
    :type P: Optional[np.ndarray]
    :param valid_region: Valid region of the calibration generated by cv2.getOptimalNewCameraMatrix (optional).
    :type valid_region: Optional[Tuple[int, int, int, int]]
    :param map_1: Map 1 for undistortion generated by cv2.initUndistortRectifyMap (optional).
    :type map_1: Optional[np.ndarray]
    :param map_2: Map 2 for undistortion generated by cv2.initUndistortRectifyMap (optional).
    :type map_2: Optional[np.ndarray]
    :param pinhole: Open3D pinhole camera intrinsic (optional).
    :type pinhole: Optional[o3d.camera.PinholeCameraIntrinsic]
    """

    size: Tuple[int, int]
    K: np.ndarray
    D: np.ndarray
    fx: float
    fy: float
    cx: float
    cy: float
    fov: float
    P: Optional[np.ndarray] = None
    valid_region: Optional[Tuple[int, int, int, int]] = None
    map_1: Optional[np.ndarray] = None
    map_2: Optional[np.ndarray] = None
    pinhole: Optional[o3d.camera.PinholeCameraIntrinsic] = None


@dataclass
class CalibrationData:
    """
    An object to store calibration data for an entire OAK camera.

    :param rgb: RGB camera calibration data.
    :type rgb: CalibrationData
    :param left: Left mono camera calibration data.
    :type left: CalibrationData
    :param right: Right mono camera calibration data.
    :type right: CalibrationData
    :param stereo: Stereo camera calibration data.
    :type stereo: StereoCalibrationData
    :param primary: Primary camera calibration data.
    :type primary: CalibrationData
    """

    rgb: ColorCalibrationData
    left: MonoCalibrationData
    right: MonoCalibrationData
    stereo: StereoCalibrationData
    primary: Optional[MonoCalibrationData] = None
